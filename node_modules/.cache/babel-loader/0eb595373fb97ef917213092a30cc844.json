{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _actions = require('@appbaseio/reactivecore/lib/actions');\n\nvar _hoistNonReactStatics = require('hoist-non-react-statics');\n\nvar _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);\n\nvar _helper = require('@appbaseio/reactivecore/lib/utils/helper');\n\nvar _types = require('@appbaseio/reactivecore/lib/utils/types');\n\nvar _types2 = _interopRequireDefault(_types);\n\nvar _Input = require('../../styles/Input');\n\nvar _Input2 = _interopRequireDefault(_Input);\n\nvar _InputIcon = require('../../styles/InputIcon');\n\nvar _InputIcon2 = _interopRequireDefault(_InputIcon);\n\nvar _CancelSvg = require('../shared/CancelSvg');\n\nvar _CancelSvg2 = _interopRequireDefault(_CancelSvg);\n\nvar _Title = require('../../styles/Title');\n\nvar _Title2 = _interopRequireDefault(_Title);\n\nvar _Container = require('../../styles/Container');\n\nvar _Container2 = _interopRequireDefault(_Container);\n\nvar _utils = require('../../utils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar TextField = function (_Component) {\n  _inherits(TextField, _Component);\n\n  function TextField(props) {\n    _classCallCheck(this, TextField);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _initialiseProps.call(_this);\n\n    var currentValue = props.selectedValue || props.value || props.defaultValue || '';\n    _this.state = {\n      currentValue: currentValue\n    };\n    _this.locked = false;\n    props.addComponent(props.componentId);\n    props.setQueryListener(props.componentId, props.onQueryChange, null);\n\n    _this.setReact(props);\n\n    var hasMounted = false;\n\n    if (currentValue) {\n      _this.setValue(currentValue, true, props, hasMounted);\n    }\n\n    return _this;\n  }\n\n  TextField.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var _this2 = this;\n\n    (0, _helper.checkPropChange)(this.props.react, prevProps.react, function () {\n      _this2.setReact(_this2.props);\n    });\n    (0, _helper.checkSomePropChange)(this.props, prevProps, ['dataField', 'nestedField'], function () {\n      _this2.updateQuery(_this2.state.currentValue, _this2.props);\n    });\n\n    if (this.props.value !== prevProps.value) {\n      this.setValue(this.props.value, true, this.props);\n    } else if ( // since, selectedValue will be updated when currentValue changes,\n    // we must only check for the changes introduced by\n    // clear action from SelectedFilters component in which case,\n    // the currentValue will never match the updated selectedValue\n    this.props.selectedValue !== prevProps.selectedValue && this.state.currentValue !== this.props.selectedValue) {\n      var _props = this.props,\n          value = _props.value,\n          onChange = _props.onChange;\n\n      if (value === undefined) {\n        this.setValue(this.props.selectedValue || '', true, this.props);\n      } else if (onChange) {\n        // value prop exists\n        onChange(this.props.selectedValue || '');\n      } else {\n        // value prop exists and onChange is not defined:\n        // we need to put the current value back into the store\n        // if the clear action was triggered by interacting with\n        // selected-filters component\n        this.setValue(this.state.currentValue, true, this.props, false);\n      }\n    }\n  };\n\n  TextField.prototype.componentWillUnmount = function componentWillUnmount() {\n    this.props.removeComponent(this.props.componentId);\n  };\n\n  TextField.prototype.setReact = function setReact(props) {\n    if (props.react) {\n      props.watchComponent(props.componentId, props.react);\n    }\n  };\n\n  TextField.prototype.render = function render() {\n    var _this3 = this;\n\n    return _react2.default.createElement(_Container2.default, {\n      style: this.props.style,\n      className: this.props.className\n    }, this.props.title && _react2.default.createElement(_Title2.default, {\n      className: (0, _helper.getClassName)(this.props.innerClass, 'title') || null\n    }, this.props.title), _react2.default.createElement('div', {\n      className: _Input.suggestionsContainer\n    }, _react2.default.createElement(_Input2.default, {\n      type: 'text',\n      className: (0, _helper.getClassName)(this.props.innerClass, 'input') || null,\n      placeholder: this.props.placeholder,\n      onChange: this.handleChange,\n      value: this.state.currentValue,\n      onBlur: this.props.onBlur,\n      onFocus: this.props.onFocus,\n      onKeyPress: this.props.onKeyPress,\n      onKeyDown: this.props.onKeyDown,\n      onKeyUp: this.props.onKeyUp,\n      autoFocus: this.props.autoFocus,\n      innerRef: function innerRef(c) {\n        _this3._inputRef = c;\n      },\n      themePreset: this.props.themePreset,\n      showClear: this.props.showClear\n    }), this.renderIcons()));\n  };\n\n  return TextField;\n}(_react.Component);\n\nTextField.defaultQuery = function (value, props) {\n  var query = null;\n\n  if (value && value.trim() !== '') {\n    var _match;\n\n    query = {\n      match: (_match = {}, _match[props.dataField] = value, _match)\n    };\n  }\n\n  if (query && props.nestedField) {\n    return {\n      query: {\n        nested: {\n          path: props.nestedField,\n          query: query\n        }\n      }\n    };\n  }\n\n  return query;\n};\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this4 = this;\n\n  this.handleTextChange = (0, _helper.debounce)(function (value) {\n    _this4.updateQuery(value, _this4.props);\n  }, this.props.debounce);\n\n  this.setValue = function (value) {\n    var isDefaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var props = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _this4.props;\n    var hasMounted = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true; // ignore state updates when component is locked\n\n    if (props.beforeValueChange && _this4.locked) {\n      return;\n    }\n\n    _this4.locked = true;\n\n    var performUpdate = function performUpdate() {\n      if (hasMounted) {\n        _this4.setState({\n          currentValue: value\n        }, function () {\n          if (isDefaultValue) {\n            _this4.updateQuery(value, props);\n          } else {\n            // debounce for handling text while typing\n            _this4.handleTextChange(value);\n          }\n\n          _this4.locked = false;\n          if (props.onValueChange) props.onValueChange(value);\n        });\n      } else {\n        _this4.updateQuery(value, props);\n\n        _this4.locked = false;\n        if (props.onValueChange) props.onValueChange(value);\n      }\n    };\n\n    (0, _helper.checkValueChange)(props.componentId, value, props.beforeValueChange, performUpdate);\n  };\n\n  this.updateQuery = function (value, props) {\n    var customQuery = props.customQuery;\n    var query = TextField.defaultQuery(value, props);\n    var customQueryOptions = void 0;\n\n    if (customQuery) {\n      var _ref = customQuery(value, props) || {};\n\n      query = _ref.query;\n      customQueryOptions = (0, _helper.getOptionsFromQuery)(customQuery(value, props));\n    }\n\n    props.setQueryOptions(props.componentId, customQueryOptions);\n    props.updateQuery({\n      componentId: props.componentId,\n      query: query,\n      value: value,\n      label: props.filterLabel,\n      showFilter: props.showFilter,\n      URLParams: props.URLParams\n    });\n  };\n\n  this.handleChange = function (e) {\n    var _props2 = _this4.props,\n        value = _props2.value,\n        onChange = _props2.onChange;\n    var textValue = e.target.value;\n\n    if (value === undefined) {\n      _this4.setValue(textValue);\n    } else if (onChange) {\n      onChange(textValue);\n    }\n  };\n\n  this.clearValue = function () {\n    var _props3 = _this4.props,\n        value = _props3.value,\n        onChange = _props3.onChange;\n\n    if (value) {\n      if (onChange) onChange('');\n    } else {\n      _this4.setValue('', true);\n    }\n  };\n\n  this.renderCancelIcon = function () {\n    if (_this4.props.showClear) {\n      return _this4.props.clearIcon || _react2.default.createElement(_CancelSvg2.default, null);\n    }\n\n    return null;\n  };\n\n  this.renderIcons = function () {\n    return _react2.default.createElement('div', null, _this4.state.currentValue && _this4.props.showClear && _react2.default.createElement(_InputIcon2.default, {\n      onClick: _this4.clearValue,\n      iconPosition: 'right'\n    }, _this4.renderCancelIcon()));\n  };\n};\n\nTextField.propTypes = {\n  addComponent: _types2.default.funcRequired,\n  removeComponent: _types2.default.funcRequired,\n  setQueryListener: _types2.default.funcRequired,\n  updateQuery: _types2.default.funcRequired,\n  watchComponent: _types2.default.funcRequired,\n  selectedValue: _types2.default.selectedValue,\n  setQueryOptions: _types2.default.funcRequired,\n  // component props\n  autoFocus: _types2.default.bool,\n  beforeValueChange: _types2.default.func,\n  className: _types2.default.string,\n  clearIcon: _types2.default.children,\n  componentId: _types2.default.stringRequired,\n  customQuery: _types2.default.func,\n  dataField: _types2.default.stringRequired,\n  debounce: _types2.default.number,\n  defaultValue: _types2.default.string,\n  value: _types2.default.string,\n  filterLabel: _types2.default.string,\n  innerClass: _types2.default.style,\n  onBlur: _types2.default.func,\n  onFocus: _types2.default.func,\n  onKeyDown: _types2.default.func,\n  onKeyPress: _types2.default.func,\n  onKeyUp: _types2.default.func,\n  onQueryChange: _types2.default.func,\n  onValueChange: _types2.default.func,\n  onChange: _types2.default.func,\n  placeholder: _types2.default.string,\n  nestedField: _types2.default.string,\n  react: _types2.default.react,\n  ref: _types2.default.func,\n  showClear: _types2.default.bool,\n  showFilter: _types2.default.bool,\n  style: _types2.default.style,\n  themePreset: _types2.default.themePreset,\n  title: _types2.default.title,\n  URLParams: _types2.default.bool\n};\nTextField.defaultProps = {\n  className: null,\n  debounce: 0,\n  placeholder: 'Search',\n  showClear: false,\n  showFilter: true,\n  style: {},\n  URLParams: false\n};\n\nvar mapStateToProps = function mapStateToProps(state, props) {\n  return {\n    selectedValue: state.selectedValues[props.componentId] && state.selectedValues[props.componentId].value || null,\n    themePreset: state.config.themePreset\n  };\n};\n\nvar mapDispatchtoProps = function mapDispatchtoProps(dispatch) {\n  return {\n    addComponent: function addComponent(component) {\n      return dispatch((0, _actions.addComponent)(component));\n    },\n    removeComponent: function removeComponent(component) {\n      return dispatch((0, _actions.removeComponent)(component));\n    },\n    updateQuery: function updateQuery(updateQueryObject) {\n      return dispatch((0, _actions.updateQuery)(updateQueryObject));\n    },\n    watchComponent: function watchComponent(component, react) {\n      return dispatch((0, _actions.watchComponent)(component, react));\n    },\n    setQueryListener: function setQueryListener(component, onQueryChange, beforeQueryChange) {\n      return dispatch((0, _actions.setQueryListener)(component, onQueryChange, beforeQueryChange));\n    },\n    setQueryOptions: function setQueryOptions(component, props) {\n      return dispatch((0, _actions.setQueryOptions)(component, props));\n    }\n  };\n};\n\nvar ConnectedComponent = (0, _utils.connect)(mapStateToProps, mapDispatchtoProps)(function (props) {\n  return _react2.default.createElement(TextField, _extends({\n    ref: props.myForwardedRef\n  }, props));\n}); // eslint-disable-next-line\n\nvar ForwardRefComponent = _react2.default.forwardRef(function (props, ref) {\n  return _react2.default.createElement(ConnectedComponent, _extends({}, props, {\n    myForwardedRef: ref\n  }));\n});\n\n(0, _hoistNonReactStatics2.default)(ForwardRefComponent, TextField);\nForwardRefComponent.name = 'TextField';\nexports.default = ForwardRefComponent;","map":null,"metadata":{},"sourceType":"script"}