{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _actions = require('@appbaseio/reactivecore/lib/actions');\n\nvar _hoistNonReactStatics = require('hoist-non-react-statics');\n\nvar _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);\n\nvar _helper = require('@appbaseio/reactivecore/lib/utils/helper');\n\nvar _types = require('@appbaseio/reactivecore/lib/utils/types');\n\nvar _types2 = _interopRequireDefault(_types);\n\nvar _Title = require('../../styles/Title');\n\nvar _Title2 = _interopRequireDefault(_Title);\n\nvar _Container = require('../../styles/Container');\n\nvar _Container2 = _interopRequireDefault(_Container);\n\nvar _Dropdown = require('../shared/Dropdown');\n\nvar _Dropdown2 = _interopRequireDefault(_Dropdown);\n\nvar _utils = require('../../utils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar MultiDropdownRange = function (_Component) {\n  _inherits(MultiDropdownRange, _Component);\n\n  function MultiDropdownRange(props) {\n    _classCallCheck(this, MultiDropdownRange);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _initialiseProps.call(_this);\n\n    var defaultValue = props.defaultValue || props.value;\n    var value = props.selectedValue || defaultValue || [];\n    var currentValue = MultiDropdownRange.parseValue(value, props); // selectedValues hold the selected items as keys for O(1) complexity\n\n    _this.selectedValues = {};\n    currentValue.forEach(function (item) {\n      _this.selectedValues[item.label] = true;\n    });\n    _this.state = {\n      currentValue: currentValue\n    };\n    _this.type = 'range';\n    _this.locked = false;\n    props.addComponent(props.componentId);\n    props.setQueryListener(props.componentId, props.onQueryChange, null);\n\n    _this.setReact(props);\n\n    var hasMounted = false;\n\n    if (value.length) {\n      _this.selectItem(value, true, props, hasMounted);\n    }\n\n    return _this;\n  }\n\n  MultiDropdownRange.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var _this2 = this;\n\n    (0, _helper.checkPropChange)(this.props.react, prevProps.react, function () {\n      return _this2.setReact(_this2.props);\n    });\n    (0, _helper.checkSomePropChange)(this.props, prevProps, ['dataField', 'nestedField'], function () {\n      _this2.updateQuery(_this2.state.currentValue, _this2.props);\n    });\n\n    if (!(0, _helper.isEqual)(this.props.value, prevProps.value)) {\n      this.selectItem(this.props.value, true);\n    } else if (!(0, _helper.isEqual)(this.state.currentValue, this.props.selectedValue) && !(0, _helper.isEqual)(this.props.selectedValue, prevProps.selectedValue)) {\n      var _props = this.props,\n          value = _props.value,\n          onChange = _props.onChange;\n\n      if (value === undefined) {\n        this.selectItem(this.props.selectedValue || null);\n      } else if (onChange) {\n        onChange(this.props.selectedValue || null);\n      } else {\n        var selectedValuesArray = Object.keys(this.selectedValues);\n        this.selectItem(selectedValuesArray, true);\n      }\n    }\n  };\n\n  MultiDropdownRange.prototype.componentWillUnmount = function componentWillUnmount() {\n    this.props.removeComponent(this.props.componentId);\n  };\n\n  MultiDropdownRange.prototype.setReact = function setReact(props) {\n    if (props.react) {\n      props.watchComponent(props.componentId, props.react);\n    }\n  }; // parses range label to get start and end\n\n\n  MultiDropdownRange.prototype.render = function render() {\n    return _react2.default.createElement(_Container2.default, {\n      style: this.props.style,\n      className: this.props.className\n    }, this.props.title && _react2.default.createElement(_Title2.default, {\n      className: (0, _helper.getClassName)(this.props.innerClass, 'title') || null\n    }, this.props.title), _react2.default.createElement(_Dropdown2.default, {\n      innerClass: this.props.innerClass,\n      items: this.props.data,\n      onChange: this.handleChange,\n      selectedItem: this.state.currentValue,\n      placeholder: this.props.placeholder,\n      keyField: 'label',\n      multi: true,\n      returnsObject: true,\n      themePreset: this.props.themePreset\n    }));\n  };\n\n  return MultiDropdownRange;\n}(_react.Component);\n\nMultiDropdownRange.parseValue = function (value, props) {\n  return value ? props.data.filter(function (item) {\n    return value.includes(item.label);\n  }) : null;\n};\n\nMultiDropdownRange.defaultQuery = function (values, props) {\n  var generateRangeQuery = function generateRangeQuery(dataField, items) {\n    if (items.length > 0) {\n      return items.map(function (value) {\n        var _range;\n\n        return {\n          range: (_range = {}, _range[dataField] = {\n            gte: value.start,\n            lte: value.end,\n            boost: 2.0\n          }, _range)\n        };\n      });\n    }\n\n    return null;\n  };\n\n  var query = null;\n\n  if (values && values.length) {\n    query = {\n      bool: {\n        should: generateRangeQuery(props.dataField, values),\n        minimum_should_match: 1,\n        boost: 1.0\n      }\n    };\n  }\n\n  if (query && props.nestedField) {\n    return {\n      query: {\n        nested: {\n          path: props.nestedField,\n          query: query\n        }\n      }\n    };\n  }\n\n  return query;\n};\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this3 = this;\n\n  this.selectItem = function (item) {\n    var isDefaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var props = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _this3.props;\n    var hasMounted = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true; // ignore state updates when component is locked\n\n    if (props.beforeValueChange && _this3.locked) {\n      return;\n    }\n\n    _this3.locked = true;\n    var currentValue = _this3.state.currentValue;\n\n    if (!item) {\n      currentValue = [];\n      _this3.selectedValues = {};\n    } else if (isDefaultValue) {\n      // checking if the items in defaultSeleted exist in the data prop\n      currentValue = MultiDropdownRange.parseValue(item, props);\n      currentValue.forEach(function (value) {\n        var _extends2;\n\n        _this3.selectedValues = _extends({}, _this3.selectedValues, (_extends2 = {}, _extends2[value.label] = true, _extends2));\n      });\n    } else if (_this3.selectedValues[item.label]) {\n      currentValue = currentValue.filter(function (value) {\n        return value.label !== item.label;\n      });\n\n      var _selectedValues = _this3.selectedValues,\n          del = _selectedValues[item.label],\n          selectedValues = _objectWithoutProperties(_selectedValues, [item.label]);\n\n      _this3.selectedValues = selectedValues;\n    } else {\n      var _extends3;\n\n      currentValue = [].concat(currentValue, [item]);\n      _this3.selectedValues = _extends({}, _this3.selectedValues, (_extends3 = {}, _extends3[item.label] = true, _extends3));\n    }\n\n    var performUpdate = function performUpdate() {\n      var handleUpdates = function handleUpdates() {\n        _this3.updateQuery(currentValue, props);\n\n        _this3.locked = false;\n        if (props.onValueChange) props.onValueChange(currentValue);\n      };\n\n      if (hasMounted) {\n        _this3.setState({\n          currentValue: currentValue\n        }, handleUpdates);\n      } else {\n        handleUpdates();\n      }\n    };\n\n    (0, _helper.checkValueChange)(props.componentId, currentValue, props.beforeValueChange, performUpdate);\n  };\n\n  this.updateQuery = function (value, props) {\n    var customQuery = props.customQuery;\n    var query = MultiDropdownRange.defaultQuery(value, props);\n    var customQueryOptions = void 0;\n\n    if (customQuery) {\n      var _ref = customQuery(value, props) || {};\n\n      query = _ref.query;\n      customQueryOptions = (0, _helper.getOptionsFromQuery)(customQuery(value, props));\n    }\n\n    props.setQueryOptions(props.componentId, customQueryOptions);\n    props.updateQuery({\n      componentId: props.componentId,\n      query: query,\n      value: value,\n      label: props.filterLabel,\n      showFilter: props.showFilter,\n      URLParams: props.URLParams,\n      componentType: 'MULTIDROPDOWNRANGE'\n    });\n  };\n\n  this.handleChange = function (items) {\n    var _props2 = _this3.props,\n        value = _props2.value,\n        onChange = _props2.onChange;\n\n    if (value === undefined) {\n      _this3.selectItem(items);\n    } else if (onChange) {\n      onChange(items);\n    }\n  };\n};\n\nMultiDropdownRange.propTypes = {\n  addComponent: _types2.default.funcRequired,\n  removeComponent: _types2.default.funcRequired,\n  setQueryListener: _types2.default.funcRequired,\n  updateQuery: _types2.default.funcRequired,\n  watchComponent: _types2.default.funcRequired,\n  selectedValue: _types2.default.selectedValue,\n  setQueryOptions: _types2.default.funcRequired,\n  // component props\n  beforeValueChange: _types2.default.func,\n  className: _types2.default.string,\n  componentId: _types2.default.stringRequired,\n  customQuery: _types2.default.func,\n  data: _types2.default.data,\n  dataField: _types2.default.stringRequired,\n  defaultValue: _types2.default.stringArray,\n  value: _types2.default.stringArray,\n  filterLabel: _types2.default.filterLabel,\n  innerClass: _types2.default.style,\n  nestedField: _types2.default.string,\n  onQueryChange: _types2.default.func,\n  onValueChange: _types2.default.func,\n  onChange: _types2.default.func,\n  placeholder: _types2.default.string,\n  react: _types2.default.react,\n  showFilter: _types2.default.bool,\n  style: _types2.default.style,\n  title: _types2.default.title,\n  themePreset: _types2.default.themePreset,\n  URLParams: _types2.default.bool\n};\nMultiDropdownRange.defaultProps = {\n  className: null,\n  placeholder: 'Select a value',\n  showFilter: true,\n  style: {},\n  URLParams: false\n};\n\nvar mapStateToProps = function mapStateToProps(state, props) {\n  return {\n    selectedValue: state.selectedValues[props.componentId] ? state.selectedValues[props.componentId].value : null,\n    themePreset: state.config.themePreset\n  };\n};\n\nvar mapDispatchtoProps = function mapDispatchtoProps(dispatch) {\n  return {\n    addComponent: function addComponent(component) {\n      return dispatch((0, _actions.addComponent)(component));\n    },\n    removeComponent: function removeComponent(component) {\n      return dispatch((0, _actions.removeComponent)(component));\n    },\n    updateQuery: function updateQuery(updateQueryObject) {\n      return dispatch((0, _actions.updateQuery)(updateQueryObject));\n    },\n    watchComponent: function watchComponent(component, react) {\n      return dispatch((0, _actions.watchComponent)(component, react));\n    },\n    setQueryListener: function setQueryListener(component, onQueryChange, beforeQueryChange) {\n      return dispatch((0, _actions.setQueryListener)(component, onQueryChange, beforeQueryChange));\n    },\n    setQueryOptions: function setQueryOptions(component, props, execute) {\n      return dispatch((0, _actions.setQueryOptions)(component, props, execute));\n    }\n  };\n};\n\nvar ConnectedComponent = (0, _utils.connect)(mapStateToProps, mapDispatchtoProps)(function (props) {\n  return _react2.default.createElement(MultiDropdownRange, _extends({\n    ref: props.myForwardedRef\n  }, props));\n}); // eslint-disable-next-line\n\nvar ForwardRefComponent = _react2.default.forwardRef(function (props, ref) {\n  return _react2.default.createElement(ConnectedComponent, _extends({}, props, {\n    myForwardedRef: ref\n  }));\n});\n\n(0, _hoistNonReactStatics2.default)(ForwardRefComponent, MultiDropdownRange);\nForwardRefComponent.name = 'MultiDropdownRange';\nexports.default = ForwardRefComponent;","map":null,"metadata":{},"sourceType":"script"}