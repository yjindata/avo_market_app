{"ast":null,"code":"var _jsxFileName = \"/Users/yj/avo_market/src/components/BarChart.js\";\nimport React from 'react';\nimport { extent as d3ArrayExtent } from 'd3-array';\nimport { scaleLinear as d3ScaleLinear, scaleTime as d3ScaleTime } from 'd3-scale';\nimport { line as d3Line } from 'd3-shape';\nimport { axisBottom as d3AxisBottom, axisLeft as d3AxisLeft } from 'd3-axis';\nimport { select as d3Select } from 'd3-selection';\nimport SVGWithMargin from '../SVGWithMargin';\nexport default (function (_ref) {\n  var data = _ref.data,\n      height = _ref.height,\n      selectX = _ref.selectX,\n      selectY = _ref.selectY,\n      width = _ref.width,\n      margin = _ref.margin;\n  // Since this is \"time series\" visualization, our x axis should have a time scale.\n  // Our x domain will be the extent ([min, max]) of x values (Dates) in our data set.\n  // Our x range will be from x=0 to x=width.\n  var xScale = d3ScaleTime().domain(d3ArrayExtent(data, selectX)).range([0, width]); // Our y axis should just have a linear scale.\n  // Our y domain will be the extent of y values (numbers) in our data set.\n\n  var yScale = d3ScaleLinear().domain(d3ArrayExtent(data, selectY)).range([height, 0]);\n  var xAxis = d3AxisBottom().scale(xScale).ticks(data.length / 2); // Add an axis for our y scale that has 3 ticks (FIXME: we should probably make number of ticks per axis a prop).\n\n  var yAxis = d3AxisLeft().scale(yScale).ticks(3); // These two functions select the scaled x and y values (respectively) of our data.\n\n  var selectScaledX = function selectScaledX(datum) {\n    return xScale(selectX(datum));\n  };\n\n  var selectScaledY = function selectScaledY(datum) {\n    return yScale(selectY(datum));\n  }; // Create a d3Line factory for our scales.\n\n\n  var sparkLine = d3Line().x(selectScaledX).y(selectScaledY); // Create a line path of for our data.\n\n  var linePath = sparkLine(data);\n  return React.createElement(SVGWithMargin, {\n    className: \"container\",\n    height: height,\n    margin: margin,\n    width: width,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(\"g\", {\n    className: \"xAxis\",\n    ref: function ref(node) {\n      return d3Select(node).call(xAxis);\n    },\n    style: {\n      transform: \"translateY(\".concat(height, \"px)\")\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }), React.createElement(\"g\", {\n    className: \"yAxis\",\n    ref: function ref(node) {\n      return d3Select(node).call(yAxis);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }), React.createElement(\"g\", {\n    className: \"line\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(\"path\", {\n    d: linePath,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  })));\n});","map":{"version":3,"sources":["/Users/yj/avo_market/src/components/BarChart.js"],"names":["React","extent","d3ArrayExtent","scaleLinear","d3ScaleLinear","scaleTime","d3ScaleTime","line","d3Line","axisBottom","d3AxisBottom","axisLeft","d3AxisLeft","select","d3Select","SVGWithMargin","data","height","selectX","selectY","width","margin","xScale","domain","range","yScale","xAxis","scale","ticks","length","yAxis","selectScaledX","datum","selectScaledY","sparkLine","x","y","linePath","node","call","transform"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { extent as d3ArrayExtent } from 'd3-array';\nimport {\n  scaleLinear as d3ScaleLinear,\n  scaleTime as d3ScaleTime,\n} from 'd3-scale';\nimport { line as d3Line } from 'd3-shape';\nimport {\n  axisBottom as d3AxisBottom,\n  axisLeft as d3AxisLeft,\n} from 'd3-axis';\nimport { select as d3Select } from 'd3-selection';\nimport SVGWithMargin from '../SVGWithMargin';\n\ntype Props = {\n  data: any,\n  height: number,\n  selectX: (datum: any) => any,\n  selectY: (datum: any) => any,\n  width: number,\n  margin: Object | number,\n};\n\nexport default ({\n  data,\n  height,\n  selectX,\n  selectY,\n  width,\n  margin,\n}: Props) => {\n  // Since this is \"time series\" visualization, our x axis should have a time scale.\n  // Our x domain will be the extent ([min, max]) of x values (Dates) in our data set.\n  // Our x range will be from x=0 to x=width.\n  const xScale = d3ScaleTime()\n    .domain(d3ArrayExtent(data, selectX))\n    .range([0, width]);\n  \n\n  // Our y axis should just have a linear scale.\n  // Our y domain will be the extent of y values (numbers) in our data set.\n  const yScale = d3ScaleLinear()\n    .domain(d3ArrayExtent(data, selectY))\n    .range([height, 0]);\n\n    const xAxis = d3AxisBottom()\n    .scale(xScale)\n    .ticks(data.length / 2);\n  // Add an axis for our y scale that has 3 ticks (FIXME: we should probably make number of ticks per axis a prop).\n  const yAxis = d3AxisLeft()\n    .scale(yScale)\n    .ticks(3);\n\n\n\n  // These two functions select the scaled x and y values (respectively) of our data.\n  const selectScaledX = datum => xScale(selectX(datum));\n  const selectScaledY = datum => yScale(selectY(datum));\n\n  // Create a d3Line factory for our scales.\n  const sparkLine = d3Line()\n    .x(selectScaledX)\n    .y(selectScaledY);\n\n    // Create a line path of for our data.\n  const linePath = sparkLine(data);\n\n  return (\n    <SVGWithMargin\n    className=\"container\"\n    height={height}\n    margin={margin}\n    width={width}\n  >\n      {/* ADD: our spark line as a path (inside a group, for convenient styling) */}\n      <g className=\"xAxis\" \n      ref={node => d3Select(node).call(xAxis)}\n      style={{\n        transform: `translateY(${height}px)`,\n      }}\n      />\n      <g className=\"yAxis\" ref={node => d3Select(node).call(yAxis)} />\n    \n      <g className=\"line\">\n        <path d={linePath} />\n      </g>\n      </SVGWithMargin>\n  );\n};"]},"metadata":{},"sourceType":"module"}