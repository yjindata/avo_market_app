{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _actions = require('@appbaseio/reactivecore/lib/actions');\n\nvar _hoistNonReactStatics = require('hoist-non-react-statics');\n\nvar _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);\n\nvar _helper = require('@appbaseio/reactivecore/lib/utils/helper');\n\nvar _types = require('@appbaseio/reactivecore/lib/utils/types');\n\nvar _types2 = _interopRequireDefault(_types);\n\nvar _xdate = require('xdate');\n\nvar _xdate2 = _interopRequireDefault(_xdate);\n\nvar _DayPickerInput = require('react-day-picker/DayPickerInput');\n\nvar _DayPickerInput2 = _interopRequireDefault(_DayPickerInput);\n\nvar _emotionTheming = require('emotion-theming');\n\nvar _DateContainer = require('../../styles/DateContainer');\n\nvar _DateContainer2 = _interopRequireDefault(_DateContainer);\n\nvar _Title = require('../../styles/Title');\n\nvar _Title2 = _interopRequireDefault(_Title);\n\nvar _Flex = require('../../styles/Flex');\n\nvar _Flex2 = _interopRequireDefault(_Flex);\n\nvar _CancelSvg = require('../shared/CancelSvg');\n\nvar _CancelSvg2 = _interopRequireDefault(_CancelSvg);\n\nvar _utils = require('../../utils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar DatePicker = function (_Component) {\n  _inherits(DatePicker, _Component);\n\n  function DatePicker(props) {\n    _classCallCheck(this, DatePicker);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _initialiseProps.call(_this);\n\n    var currentDate = props.selectedValue || props.value || props.defaultValue || '';\n    _this.state = {\n      currentDate: currentDate,\n      key: 'on'\n    };\n    _this.locked = false;\n    props.addComponent(props.componentId);\n    props.setQueryListener(props.componentId, props.onQueryChange, null);\n\n    _this.setReact(props);\n\n    var hasMounted = false;\n\n    if (currentDate) {\n      _this.handleDateChange(currentDate, true, props, hasMounted);\n    }\n\n    return _this;\n  }\n\n  DatePicker.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var _this2 = this;\n\n    (0, _helper.checkPropChange)(this.props.react, prevProps.react, function () {\n      return _this2.setReact(_this2.props);\n    });\n    (0, _helper.checkSomePropChange)(this.props, prevProps, ['dataField', 'nestedField'], function () {\n      return _this2.updateQuery(_this2.state.currentDate ? _this2.formatInputDate(_this2.state.currentDate) : null, _this2.props);\n    });\n\n    if (!(0, _helper.isEqual)(this.props.value, prevProps.value)) {\n      this.handleDateChange(this.props.value, true, this.props);\n    } else if (!(0, _helper.isEqual)(this.formatInputDate(this.state.currentDate), this.props.selectedValue) && !(0, _helper.isEqual)(this.props.selectedValue, prevProps.selectedValue)) {\n      this.handleDateChange(this.props.selectedValue || '', true, this.props);\n    }\n  };\n\n  DatePicker.prototype.componentWillUnmount = function componentWillUnmount() {\n    this.props.removeComponent(this.props.componentId);\n  };\n\n  DatePicker.prototype.setReact = function setReact(props) {\n    if (props.react) {\n      props.watchComponent(props.componentId, props.react);\n    }\n  };\n\n  DatePicker.prototype.render = function render() {\n    return _react2.default.createElement(_DateContainer2.default, {\n      showBorder: !this.props.showClear,\n      style: this.props.style,\n      className: this.props.className\n    }, this.props.title && _react2.default.createElement(_Title2.default, {\n      className: (0, _helper.getClassName)(this.props.innerClass, 'title') || null\n    }, this.props.title), _react2.default.createElement(_Flex2.default, {\n      showBorder: this.props.showClear,\n      iconPosition: 'right',\n      style: {\n        background: this.props.theme.colors.backgroundColor || 'transparent'\n      }\n    }, _react2.default.createElement(_DayPickerInput2.default, _extends({\n      showOverlay: this.props.focused,\n      formatDate: this.formatInputDate,\n      value: this.state.currentDate,\n      placeholder: this.props.placeholder,\n      dayPickerProps: {\n        numberOfMonths: this.props.numberOfMonths,\n        initialMonth: this.props.initialMonth\n      },\n      key: this.state.key,\n      clickUnselectsDay: this.props.clickUnselectsDay,\n      onDayChange: this.handleDayPicker,\n      inputProps: {\n        readOnly: true\n      },\n      classNames: {\n        container: (0, _helper.getClassName)(this.props.innerClass, 'daypicker-container') || 'DayPickerInput',\n        overlayWrapper: (0, _helper.getClassName)(this.props.innerClass, 'daypicker-overlay-wrapper') || 'DayPickerInput-OverlayWrapper',\n        overlay: (0, _helper.getClassName)(this.props.innerClass, 'daypicker-overlay') || 'DayPickerInput-Overlay'\n      }\n    }, this.props.dayPickerInputProps)), this.props.showClear && this.state.currentDate && _react2.default.createElement(_CancelSvg2.default, {\n      onClick: this.clearDayPicker\n    })));\n  };\n\n  return DatePicker;\n}(_react.Component);\n\nDatePicker.defaultQuery = function (value, props) {\n  var query = null;\n\n  if (value && props.queryFormat) {\n    var _range;\n\n    query = {\n      range: (_range = {}, _range[props.dataField] = {\n        gte: (0, _helper.formatDate)(new _xdate2.default(value).addHours(-24), props),\n        lte: (0, _helper.formatDate)(new _xdate2.default(value), props)\n      }, _range)\n    };\n  }\n\n  if (query && props.nestedField) {\n    return {\n      query: {\n        nested: {\n          path: props.nestedField,\n          query: query\n        }\n      }\n    };\n  }\n\n  return query;\n};\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this3 = this;\n\n  this.formatInputDate = function (date) {\n    return new _xdate2.default(date).toString('yyyy-MM-dd');\n  };\n\n  this.clearDayPicker = function () {\n    if (_this3.state.currentDate !== '') {\n      var _props = _this3.props,\n          value = _props.value,\n          onChange = _props.onChange;\n\n      if (value === undefined) {\n        _this3.handleDateChange('', false); // resets the day picker component\n\n      } else if (onChange) {\n        onChange('');\n      } else {\n        // Since value prop is defined and onChange is not define\n        // we keep the same date as in store\n        _this3.setState({\n          currentDate: _this3.state.currentDate\n        });\n      }\n    }\n  };\n\n  this.handleDayPicker = function (date) {\n    var _props2 = _this3.props,\n        value = _props2.value,\n        onChange = _props2.onChange;\n\n    if (value === undefined) {\n      _this3.handleDateChange(date || '');\n    } else if (onChange) {\n      onChange(date || '');\n    } else {\n      // this will trigger a remount on the date component\n      // since DayPickerInput doesn't respect the controlled behavior setting on its own\n      _this3.setState(function (state) {\n        return {\n          key: state.key === 'on' ? 'off' : 'on'\n        };\n      });\n    }\n  };\n\n  this.handleDateChange = function (currentDate) {\n    var isDefaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var props = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _this3.props;\n    var hasMounted = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true; // currentDate should be valid or empty string for resetting the query\n\n    if (isDefaultValue && !new _xdate2.default(currentDate).valid() && currentDate.length) {\n      console.error('DatePicker: ' + props.componentId + ' invalid value passed for date');\n    } else {\n      // ignore state updates when component is locked\n      if (props.beforeValueChange && _this3.locked) {\n        return;\n      }\n\n      _this3.locked = true;\n      var value = null;\n\n      if (currentDate) {\n        value = isDefaultValue ? currentDate : _this3.formatInputDate(currentDate);\n      }\n\n      var performUpdate = function performUpdate() {\n        var handleUpdates = function handleUpdates() {\n          _this3.updateQuery(value, props);\n\n          _this3.locked = false;\n          if (props.onValueChange) props.onValueChange(value);\n        };\n\n        if (hasMounted) {\n          _this3.setState({\n            currentDate: currentDate\n          }, handleUpdates);\n        } else {\n          handleUpdates();\n        }\n      };\n\n      (0, _helper.checkValueChange)(props.componentId, value, props.beforeValueChange, performUpdate);\n    }\n  };\n\n  this.updateQuery = function (value, props) {\n    var customQuery = props.customQuery;\n    var query = DatePicker.defaultQuery(value, props);\n    var customQueryOptions = void 0;\n\n    if (customQuery) {\n      var _ref = customQuery(value, props) || {};\n\n      query = _ref.query;\n      customQueryOptions = (0, _helper.getOptionsFromQuery)(customQuery(value, props));\n    }\n\n    props.setQueryOptions(props.componentId, customQueryOptions);\n    props.updateQuery({\n      componentId: props.componentId,\n      query: query,\n      value: value,\n      showFilter: props.showFilter,\n      label: props.filterLabel,\n      URLParams: props.URLParams,\n      componentType: 'DATEPICKER'\n    });\n  };\n};\n\nDatePicker.propTypes = {\n  addComponent: _types2.default.funcRequired,\n  removeComponent: _types2.default.funcRequired,\n  setQueryListener: _types2.default.funcRequired,\n  updateQuery: _types2.default.funcRequired,\n  watchComponent: _types2.default.funcRequired,\n  selectedValue: _types2.default.selectedValue,\n  setQueryOptions: _types2.default.funcRequired,\n  // component props\n  className: _types2.default.string,\n  clickUnselectsDay: _types2.default.bool,\n  componentId: _types2.default.stringRequired,\n  dataField: _types2.default.stringRequired,\n  dayPickerInputProps: _types2.default.props,\n  defaultValue: _types2.default.date,\n  value: _types2.default.date,\n  filterLabel: _types2.default.string,\n  focused: _types2.default.bool,\n  initialMonth: _types2.default.dateObject,\n  innerClass: _types2.default.style,\n  numberOfMonths: _types2.default.number,\n  onQueryChange: _types2.default.func,\n  onValueChange: _types2.default.func,\n  onChange: _types2.default.func,\n  placeholder: _types2.default.string,\n  nestedField: _types2.default.string,\n  queryFormat: _types2.default.queryFormatDate,\n  react: _types2.default.react,\n  showClear: _types2.default.bool,\n  showFilter: _types2.default.bool,\n  style: _types2.default.style,\n  theme: _types2.default.style,\n  title: _types2.default.string\n};\nDatePicker.defaultProps = {\n  clickUnselectsDay: true,\n  numberOfMonths: 1,\n  placeholder: 'Select Date',\n  showClear: true,\n  showFilter: true\n};\n\nvar mapStateToProps = function mapStateToProps(state, props) {\n  return {\n    selectedValue: state.selectedValues[props.componentId] ? state.selectedValues[props.componentId].value : null\n  };\n};\n\nvar mapDispatchtoProps = function mapDispatchtoProps(dispatch) {\n  return {\n    addComponent: function addComponent(component) {\n      return dispatch((0, _actions.addComponent)(component));\n    },\n    removeComponent: function removeComponent(component) {\n      return dispatch((0, _actions.removeComponent)(component));\n    },\n    updateQuery: function updateQuery(updateQueryObject) {\n      return dispatch((0, _actions.updateQuery)(updateQueryObject));\n    },\n    watchComponent: function watchComponent(component, react) {\n      return dispatch((0, _actions.watchComponent)(component, react));\n    },\n    setQueryListener: function setQueryListener(component, onQueryChange, beforeQueryChange) {\n      return dispatch((0, _actions.setQueryListener)(component, onQueryChange, beforeQueryChange));\n    },\n    setQueryOptions: function setQueryOptions(component, props) {\n      return dispatch((0, _actions.setQueryOptions)(component, props));\n    }\n  };\n};\n\nvar ConnectedComponent = (0, _utils.connect)(mapStateToProps, mapDispatchtoProps)((0, _emotionTheming.withTheme)(function (props) {\n  return _react2.default.createElement(DatePicker, _extends({\n    ref: props.myForwardedRef\n  }, props));\n})); // eslint-disable-next-line\n\nvar ForwardRefComponent = _react2.default.forwardRef(function (props, ref) {\n  return _react2.default.createElement(ConnectedComponent, _extends({}, props, {\n    myForwardedRef: ref\n  }));\n});\n\n(0, _hoistNonReactStatics2.default)(ForwardRefComponent, DatePicker);\nForwardRefComponent.name = 'DatePicker';\nexports.default = ForwardRefComponent;","map":null,"metadata":{},"sourceType":"script"}