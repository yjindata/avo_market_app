{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _actions = require('@appbaseio/reactivecore/lib/actions');\n\nvar _helper = require('@appbaseio/reactivecore/lib/utils/helper');\n\nvar _hoistNonReactStatics = require('hoist-non-react-statics');\n\nvar _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);\n\nvar _types = require('@appbaseio/reactivecore/lib/utils/types');\n\nvar _types2 = _interopRequireDefault(_types);\n\nvar _Title = require('../../styles/Title');\n\nvar _Title2 = _interopRequireDefault(_Title);\n\nvar _Input = require('../../styles/Input');\n\nvar _Input2 = _interopRequireDefault(_Input);\n\nvar _Container = require('../../styles/Container');\n\nvar _Container2 = _interopRequireDefault(_Container);\n\nvar _FormControlList = require('../../styles/FormControlList');\n\nvar _utils = require('../../utils');\n\nvar _utils2 = require('./utils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar MultiDataList = function (_Component) {\n  _inherits(MultiDataList, _Component);\n\n  function MultiDataList(props) {\n    _classCallCheck(this, MultiDataList);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _initialiseProps.call(_this);\n\n    var defaultValue = props.defaultValue || props.value;\n    var currentValueArray = props.selectedValue || defaultValue || [];\n    var currentValue = {};\n    currentValueArray.forEach(function (item) {\n      currentValue[item] = true;\n    });\n    _this.state = {\n      currentValue: currentValue,\n      searchTerm: '',\n      options: props.data || []\n    };\n    _this.internalComponent = props.componentId + '__internal';\n    _this.type = 'term';\n    _this.locked = false;\n    props.addComponent(props.componentId);\n    props.addComponent(_this.internalComponent);\n    props.setQueryListener(props.componentId, props.onQueryChange, null);\n\n    _this.setReact(props);\n\n    var hasMounted = false;\n\n    if (props.showCount) {\n      _this.updateQueryOptions(props);\n    }\n\n    _this.setReact(props);\n\n    if (currentValueArray.length) {\n      _this.setValue(currentValueArray, true, props, hasMounted);\n    }\n\n    return _this;\n  }\n\n  MultiDataList.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var _this2 = this;\n\n    (0, _helper.checkPropChange)(this.props.react, prevProps.react, function () {\n      return _this2.setReact(_this2.props);\n    });\n    (0, _helper.checkSomePropChange)(this.props, prevProps, ['dataField', 'nestedField'], function () {\n      _this2.updateQuery(Object.keys(_this2.state.currentValue), _this2.props);\n\n      if (_this2.props.showCount) {\n        _this2.updateQueryOptions(_this2.props);\n      }\n    });\n    (0, _helper.checkPropChange)(this.props.data, prevProps.data, function () {\n      if (_this2.props.showCount) {\n        _this2.updateQueryOptions(_this2.props);\n      }\n    });\n    (0, _helper.checkPropChange)(this.props.options, prevProps.options, function () {\n      if (_this2.props.options[_this2.props.dataField]) {\n        _this2.updateStateOptions(_this2.props.options[_this2.props.dataField].buckets);\n      }\n    });\n    var selectedValue = Object.keys(this.state.currentValue);\n    var selectAllLabel = this.props.selectAllLabel;\n\n    if (selectAllLabel) {\n      selectedValue = selectedValue.filter(function (val) {\n        return val !== selectAllLabel;\n      });\n\n      if (this.state.currentValue[selectAllLabel]) {\n        selectedValue = [selectAllLabel];\n      }\n    }\n\n    if (this.props.value !== prevProps.value) {\n      this.setValue(this.props.value, true);\n    } else if (!(0, _helper.isEqual)(selectedValue, this.props.selectedValue) && !(0, _helper.isEqual)(this.props.selectedValue, prevProps.selectedValue)) {\n      var _props = this.props,\n          value = _props.value,\n          onChange = _props.onChange;\n\n      if (value === undefined) {\n        this.setValue(this.props.selectedValue || [], true);\n      } else if (onChange) {\n        onChange(this.props.selectedValue || null);\n      } else {\n        var selectedListItems = Object.keys(this.state.currentValue);\n        this.setValue(selectedListItems, true);\n      }\n    }\n  };\n\n  MultiDataList.prototype.componentWillUnmount = function componentWillUnmount() {\n    this.props.removeComponent(this.props.componentId);\n    this.props.removeComponent(this.internalComponent);\n  };\n\n  MultiDataList.prototype.setReact = function setReact(props) {\n    var react = this.props.react;\n\n    if (react) {\n      var newReact = (0, _helper.pushToAndClause)(react, this.internalComponent);\n      props.watchComponent(props.componentId, newReact);\n    } else {\n      props.watchComponent(props.componentId, {\n        and: this.internalComponent\n      });\n    }\n  };\n\n  MultiDataList.generateQueryOptions = function generateQueryOptions(props, state) {\n    var queryOptions = (0, _helper.getQueryOptions)(props);\n    var includes = state.options.map(function (item) {\n      return item.value;\n    });\n    return (0, _utils2.getAggsQuery)(queryOptions, props, includes);\n  };\n\n  MultiDataList.prototype.render = function render() {\n    var _this3 = this;\n\n    var _props2 = this.props,\n        selectAllLabel = _props2.selectAllLabel,\n        showCount = _props2.showCount,\n        renderListItem = _props2.renderListItem;\n    var options = this.state.options;\n\n    if (options.length === 0) {\n      return null;\n    }\n\n    var listItems = options.filter(function (item) {\n      if (_this3.props.showSearch && _this3.state.searchTerm) {\n        return item.label.toLowerCase().includes(_this3.state.searchTerm.toLowerCase());\n      }\n\n      return true;\n    });\n    return _react2.default.createElement(_Container2.default, {\n      style: this.props.style,\n      className: this.props.className\n    }, this.props.title && _react2.default.createElement(_Title2.default, {\n      className: (0, _helper.getClassName)(this.props.innerClass, 'title') || null\n    }, this.props.title), this.renderSearch(), _react2.default.createElement(_FormControlList.UL, {\n      className: (0, _helper.getClassName)(this.props.innerClass, 'list') || null\n    }, selectAllLabel ? _react2.default.createElement('li', {\n      key: selectAllLabel,\n      className: '' + (this.state.currentValue[selectAllLabel] ? 'active' : '')\n    }, _react2.default.createElement(_FormControlList.Checkbox, {\n      className: (0, _helper.getClassName)(this.props.innerClass, 'checkbox') || null,\n      id: this.props.componentId + '-' + selectAllLabel,\n      name: selectAllLabel,\n      value: selectAllLabel,\n      onChange: this.handleClick,\n      checked: !!this.state.currentValue[selectAllLabel],\n      show: this.props.showCheckbox\n    }), _react2.default.createElement('label', {\n      className: (0, _helper.getClassName)(this.props.innerClass, 'label') || null,\n      htmlFor: this.props.componentId + '-' + selectAllLabel\n    }, selectAllLabel)) : null, listItems.length ? listItems.map(function (item) {\n      return _react2.default.createElement('li', {\n        key: item.label,\n        className: '' + (_this3.state.currentValue[item.label] ? 'active' : '')\n      }, _react2.default.createElement(_FormControlList.Checkbox, {\n        className: (0, _helper.getClassName)(_this3.props.innerClass, 'checkbox') || null,\n        id: _this3.props.componentId + '-' + item.label,\n        name: _this3.props.componentId,\n        value: item.label,\n        onChange: _this3.handleClick,\n        checked: !!_this3.state.currentValue[item.label],\n        show: _this3.props.showCheckbox\n      }), _react2.default.createElement('label', {\n        className: (0, _helper.getClassName)(_this3.props.innerClass, 'label') || null,\n        htmlFor: _this3.props.componentId + '-' + item.label\n      }, renderListItem ? renderListItem(item.label, item.count) : _react2.default.createElement('span', null, _react2.default.createElement('span', null, item.label), showCount && item.count && _react2.default.createElement('span', {\n        className: (0, _helper.getClassName)(_this3.props.innerClass, 'count') || null\n      }, item.count))));\n    }) // prettier-ignore\n    : this.props.renderNoResults && this.props.renderNoResults()));\n  };\n\n  return MultiDataList;\n}(_react.Component);\n\nMultiDataList.defaultQuery = function (value, props) {\n  var query = null;\n  var type = props.queryFormat === 'or' ? 'terms' : 'term';\n\n  if (props.selectAllLabel && Array.isArray(value) && value.includes(props.selectAllLabel)) {\n    query = {\n      exists: {\n        field: props.dataField\n      }\n    };\n  } else if (value) {\n    var listQuery = void 0;\n\n    if (props.queryFormat === 'or') {\n      var _type, _listQuery;\n\n      listQuery = (_listQuery = {}, _listQuery[type] = (_type = {}, _type[props.dataField] = value, _type), _listQuery);\n    } else {\n      // adds a sub-query with must as an array of objects for each term/value\n      var queryArray = value.map(function (item) {\n        var _type2, _ref;\n\n        return _ref = {}, _ref[type] = (_type2 = {}, _type2[props.dataField] = item, _type2), _ref;\n      });\n      listQuery = {\n        bool: {\n          must: queryArray\n        }\n      };\n    }\n\n    query = value.length ? listQuery : null;\n  }\n\n  if (query && props.nestedField) {\n    return {\n      query: {\n        nested: {\n          path: props.nestedField,\n          query: query\n        }\n      }\n    };\n  }\n\n  return query;\n};\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this4 = this;\n\n  this.setValue = function (value) {\n    var isDefaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var props = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _this4.props;\n    var hasMounted = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true; // ignore state updates when component is locked\n\n    if (props.beforeValueChange && _this4.locked) {\n      return;\n    }\n\n    _this4.locked = true;\n    var selectAllLabel = _this4.props.selectAllLabel;\n    var currentValue = _this4.state.currentValue;\n    var finalValues = null;\n\n    if (selectAllLabel && (Array.isArray(value) && value.includes(selectAllLabel) || typeof value === 'string' && value === selectAllLabel)) {\n      if (currentValue[selectAllLabel] && hasMounted && !isDefaultValue) {\n        currentValue = {};\n        finalValues = [];\n      } else {\n        props.data.forEach(function (item) {\n          currentValue[item.label] = true;\n        });\n        currentValue[selectAllLabel] = true;\n        finalValues = [selectAllLabel];\n      }\n    } else if (isDefaultValue) {\n      finalValues = value;\n      currentValue = {};\n\n      if (value) {\n        value.forEach(function (item) {\n          currentValue[item] = true;\n        });\n      }\n\n      if (selectAllLabel && selectAllLabel in currentValue) {\n        var _currentValue = currentValue,\n            del = _currentValue[selectAllLabel],\n            obj = _objectWithoutProperties(_currentValue, [selectAllLabel]);\n\n        currentValue = _extends({}, obj);\n      }\n    } else {\n      if (currentValue[value]) {\n        var _currentValue2 = currentValue,\n            _del = _currentValue2[value],\n            rest = _objectWithoutProperties(_currentValue2, [value]);\n\n        currentValue = _extends({}, rest);\n      } else {\n        currentValue[value] = true;\n      }\n\n      if (selectAllLabel && selectAllLabel in currentValue) {\n        var _currentValue3 = currentValue,\n            _del2 = _currentValue3[selectAllLabel],\n            _obj = _objectWithoutProperties(_currentValue3, [selectAllLabel]);\n\n        currentValue = _extends({}, _obj);\n      }\n\n      finalValues = Object.keys(currentValue);\n    }\n\n    var performUpdate = function performUpdate() {\n      var handleUpdates = function handleUpdates() {\n        _this4.updateQuery(finalValues, props);\n\n        _this4.locked = false;\n        if (props.onValueChange) props.onValueChange(finalValues);\n      };\n\n      if (hasMounted) {\n        _this4.setState({\n          currentValue: currentValue\n        }, handleUpdates);\n      } else {\n        handleUpdates();\n      }\n    };\n\n    (0, _helper.checkValueChange)(props.componentId, finalValues, props.beforeValueChange, performUpdate);\n  };\n\n  this.updateQuery = function (value, props) {\n    var customQuery = props.customQuery;\n    var customQueryOptions = void 0; // find the corresponding value of the label for running the query\n\n    var queryValue = value.reduce(function (acc, item) {\n      if (item === props.selectAllLabel) {\n        return acc.concat(item);\n      }\n\n      var matchingItem = props.data.find(function (dataItem) {\n        return dataItem.label === item;\n      });\n      return matchingItem ? acc.concat(matchingItem.value) : acc;\n    }, []);\n    var query = MultiDataList.defaultQuery(queryValue, props);\n\n    if (customQuery) {\n      var _ref2 = customQuery(queryValue, props) || {};\n\n      query = _ref2.query;\n      customQueryOptions = (0, _helper.getOptionsFromQuery)(customQuery((queryValue, props)));\n    }\n\n    props.setQueryOptions(props.componentId, customQueryOptions);\n    props.updateQuery({\n      componentId: props.componentId,\n      query: query,\n      value: value,\n      label: props.filterLabel,\n      showFilter: props.showFilter,\n      URLParams: props.URLParams,\n      componentType: 'MULTIDATALIST'\n    });\n  };\n\n  this.updateQueryOptions = function (props) {\n    var queryOptions = MultiDataList.generateQueryOptions(props, _this4.state);\n\n    if (props.defaultQuery) {\n      var value = Object.keys(_this4.state.currentValue);\n      var defaultQueryOptions = (0, _helper.getOptionsFromQuery)(props.defaultQuery(value, props));\n      props.setQueryOptions(_this4.internalComponent, _extends({}, queryOptions, defaultQueryOptions));\n    } else {\n      props.setQueryOptions(_this4.internalComponent, queryOptions);\n    }\n  };\n\n  this.updateStateOptions = function (bucket) {\n    if (bucket) {\n      var bucketDictionary = bucket.reduce(function (obj, item) {\n        var _extends2;\n\n        return _extends({}, obj, (_extends2 = {}, _extends2[item.key] = item.doc_count, _extends2));\n      }, {});\n      var options = _this4.state.options;\n      var newOptions = options.map(function (item) {\n        if (bucketDictionary[item.value]) {\n          return _extends({}, item, {\n            count: bucketDictionary[item.value]\n          });\n        }\n\n        return item;\n      });\n\n      _this4.setState({\n        options: newOptions\n      });\n    }\n  };\n\n  this.handleInputChange = function (e) {\n    var value = e.target.value;\n\n    _this4.setState({\n      searchTerm: value\n    });\n  };\n\n  this.renderSearch = function () {\n    if (_this4.props.showSearch) {\n      return _react2.default.createElement(_Input2.default, {\n        className: (0, _helper.getClassName)(_this4.props.innerClass, 'input') || null,\n        onChange: _this4.handleInputChange,\n        value: _this4.state.searchTerm,\n        placeholder: _this4.props.placeholder,\n        style: {\n          margin: '0 0 8px'\n        },\n        themePreset: _this4.props.themePreset\n      });\n    }\n\n    return null;\n  };\n\n  this.handleClick = function (e) {\n    var _props3 = _this4.props,\n        value = _props3.value,\n        onChange = _props3.onChange;\n    var listValue = e.target.value;\n\n    if (value === undefined) {\n      _this4.setValue(listValue);\n    } else if (onChange) {\n      onChange(listValue);\n    }\n  };\n};\n\nMultiDataList.propTypes = {\n  addComponent: _types2.default.funcRequired,\n  removeComponent: _types2.default.funcRequired,\n  setQueryListener: _types2.default.funcRequired,\n  setQueryOptions: _types2.default.funcRequired,\n  updateQuery: _types2.default.funcRequired,\n  watchComponent: _types2.default.funcRequired,\n  selectedValue: _types2.default.selectedValue,\n  options: _types2.default.options,\n  // component props\n  beforeValueChange: _types2.default.func,\n  className: _types2.default.string,\n  componentId: _types2.default.stringRequired,\n  customQuery: _types2.default.func,\n  defaultQuery: _types2.default.func,\n  data: _types2.default.data,\n  dataField: _types2.default.stringRequired,\n  defaultValue: _types2.default.stringArray,\n  value: _types2.default.stringArray,\n  filterLabel: _types2.default.string,\n  innerClass: _types2.default.style,\n  onQueryChange: _types2.default.func,\n  onValueChange: _types2.default.func,\n  onChange: _types2.default.func,\n  placeholder: _types2.default.string,\n  nestedField: _types2.default.string,\n  queryFormat: _types2.default.queryFormatSearch,\n  react: _types2.default.react,\n  selectAllLabel: _types2.default.string,\n  showCheckbox: _types2.default.boolRequired,\n  showFilter: _types2.default.bool,\n  showSearch: _types2.default.bool,\n  style: _types2.default.style,\n  themePreset: _types2.default.themePreset,\n  title: _types2.default.title,\n  URLParams: _types2.default.bool,\n  showCount: _types2.default.bool,\n  renderListItem: _types2.default.func,\n  renderNoResults: _types2.default.func\n};\nMultiDataList.defaultProps = {\n  className: null,\n  placeholder: 'Search',\n  queryFormat: 'or',\n  showCheckbox: true,\n  showFilter: true,\n  showSearch: true,\n  style: {},\n  URLParams: false,\n  showCount: false\n};\n\nvar mapStateToProps = function mapStateToProps(state, props) {\n  return {\n    selectedValue: state.selectedValues[props.componentId] && state.selectedValues[props.componentId].value || null,\n    themePreset: state.config.themePreset,\n    options: props.nestedField && state.aggregations[props.componentId] ? state.aggregations[props.componentId].reactivesearch_nested : state.aggregations[props.componentId]\n  };\n};\n\nvar mapDispatchtoProps = function mapDispatchtoProps(dispatch) {\n  return {\n    addComponent: function addComponent(component) {\n      return dispatch((0, _actions.addComponent)(component));\n    },\n    removeComponent: function removeComponent(component) {\n      return dispatch((0, _actions.removeComponent)(component));\n    },\n    updateQuery: function updateQuery(updateQueryObject) {\n      return dispatch((0, _actions.updateQuery)(updateQueryObject));\n    },\n    watchComponent: function watchComponent(component, react) {\n      return dispatch((0, _actions.watchComponent)(component, react));\n    },\n    setQueryListener: function setQueryListener(component, onQueryChange, beforeQueryChange) {\n      return dispatch((0, _actions.setQueryListener)(component, onQueryChange, beforeQueryChange));\n    },\n    setQueryOptions: function setQueryOptions(component, props) {\n      return dispatch((0, _actions.setQueryOptions)(component, props));\n    }\n  };\n};\n\nvar ConnectedComponent = (0, _utils.connect)(mapStateToProps, mapDispatchtoProps)(function (props) {\n  return _react2.default.createElement(MultiDataList, _extends({\n    ref: props.myForwardedRef\n  }, props));\n}); // eslint-disable-next-line\n\nvar ForwardRefComponent = _react2.default.forwardRef(function (props, ref) {\n  return _react2.default.createElement(ConnectedComponent, _extends({}, props, {\n    myForwardedRef: ref\n  }));\n});\n\n(0, _hoistNonReactStatics2.default)(ForwardRefComponent, MultiDataList);\nForwardRefComponent.name = 'MultiDataList';\nexports.default = ForwardRefComponent;","map":null,"metadata":{},"sourceType":"script"}