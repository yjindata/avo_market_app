{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _emotion = require('emotion');\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _actions = require('@appbaseio/reactivecore/lib/actions');\n\nvar _hoistNonReactStatics = require('hoist-non-react-statics');\n\nvar _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);\n\nvar _helper = require('@appbaseio/reactivecore/lib/utils/helper');\n\nvar _types = require('@appbaseio/reactivecore/lib/utils/types');\n\nvar _types2 = _interopRequireDefault(_types);\n\nvar _utils = require('./utils');\n\nvar _Title = require('../../styles/Title');\n\nvar _Title2 = _interopRequireDefault(_Title);\n\nvar _Input = require('../../styles/Input');\n\nvar _Input2 = _interopRequireDefault(_Input);\n\nvar _Button = require('../../styles/Button');\n\nvar _Button2 = _interopRequireDefault(_Button);\n\nvar _Container = require('../../styles/Container');\n\nvar _Container2 = _interopRequireDefault(_Container);\n\nvar _FormControlList = require('../../styles/FormControlList');\n\nvar _utils2 = require('../../utils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar MultiList = function (_Component) {\n  _inherits(MultiList, _Component);\n\n  function MultiList(props) {\n    _classCallCheck(this, MultiList);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _initialiseProps.call(_this);\n\n    var defaultValue = props.defaultValue || props.value;\n    var currentValueArray = props.selectedValue || defaultValue || [];\n    var currentValue = {};\n    currentValueArray.forEach(function (item) {\n      currentValue[item] = true;\n    });\n    var options = props.options && props.options[props.dataField] ? _this.getOptions(props.options[props.dataField].buckets, props) : [];\n    _this.state = {\n      currentValue: currentValue,\n      options: options,\n      searchTerm: '',\n      after: {},\n      // for composite aggs\n      isLastBucket: false\n    };\n    _this.locked = false;\n    _this.internalComponent = props.componentId + '__internal';\n    props.addComponent(props.componentId);\n    props.addComponent(_this.internalComponent);\n    props.setQueryListener(props.componentId, props.onQueryChange, props.onError);\n\n    _this.updateQueryOptions(props);\n\n    _this.setReact(props);\n\n    var hasMounted = false;\n\n    if (currentValueArray.length) {\n      _this.setValue(currentValueArray, true, props, hasMounted);\n    }\n\n    return _this;\n  }\n\n  MultiList.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var _this2 = this;\n\n    (0, _helper.checkPropChange)(this.props.react, prevProps.react, function () {\n      return _this2.setReact(_this2.props);\n    });\n    (0, _helper.checkPropChange)(this.props.options, prevProps.options, function () {\n      var _props = _this2.props,\n          showLoadMore = _props.showLoadMore,\n          dataField = _props.dataField,\n          options = _props.options;\n\n      if (showLoadMore) {\n        var buckets = options[dataField].buckets;\n        var after = options[dataField].after_key; // detect the last bucket by checking if the after key is absent\n\n        var isLastBucket = !after;\n\n        _this2.setState(function (state) {\n          return _extends({}, state, {\n            after: after ? {\n              after: after\n            } : state.after,\n            isLastBucket: isLastBucket,\n            options: _this2.getOptions(buckets, _this2.props)\n          });\n        }, function () {\n          // this will ensure that the Select-All (or any)\n          // value gets handled on the initial load and\n          // consecutive loads\n          var currentValue = _this2.state.currentValue;\n          var value = Object.keys(currentValue).filter(function (item) {\n            return currentValue[item];\n          });\n          if (value.length) _this2.setValue(value, true);\n        });\n      } else {\n        _this2.setState({\n          options: options[dataField] ? _this2.getOptions(options[dataField].buckets, _this2.props) : []\n        }, function () {\n          // this will ensure that the Select-All (or any)\n          // value gets handled on the initial load and\n          // consecutive loads\n          var currentValue = _this2.state.currentValue;\n          var value = Object.keys(currentValue).filter(function (item) {\n            return currentValue[item];\n          });\n          if (value.length) _this2.setValue(value, true);\n        });\n      }\n    });\n    (0, _helper.checkSomePropChange)(this.props, prevProps, ['size', 'sortBy'], function () {\n      return _this2.updateQueryOptions(_this2.props);\n    });\n    (0, _helper.checkSomePropChange)(this.props, prevProps, ['dataField', 'nestedField'], function () {\n      _this2.updateQueryOptions(_this2.props);\n\n      _this2.updateQuery(Object.keys(_this2.state.currentValue), _this2.props);\n    });\n    var selectedValue = Object.keys(this.state.currentValue);\n    var selectAllLabel = this.props.selectAllLabel;\n\n    if (selectAllLabel) {\n      selectedValue = selectedValue.filter(function (val) {\n        return val !== selectAllLabel;\n      });\n\n      if (this.state.currentValue[selectAllLabel]) {\n        selectedValue = [selectAllLabel];\n      }\n    }\n\n    if (this.props.value !== prevProps.value) {\n      this.setValue(this.props.value, true);\n    } else if (!(0, _helper.isEqual)(selectedValue, this.props.selectedValue) && !(0, _helper.isEqual)(this.props.selectedValue, prevProps.selectedValue)) {\n      var _props2 = this.props,\n          value = _props2.value,\n          onChange = _props2.onChange;\n\n      if (value === undefined) {\n        this.setValue(this.props.selectedValue || [], true);\n      } else if (onChange) {\n        onChange(this.props.selectedValue || null);\n      } else {\n        var selectedListItems = Object.keys(this.state.currentValue);\n        this.setValue(selectedListItems, true);\n      }\n    }\n  };\n\n  MultiList.prototype.componentWillUnmount = function componentWillUnmount() {\n    this.props.removeComponent(this.props.componentId);\n    this.props.removeComponent(this.internalComponent);\n  };\n\n  MultiList.generateQueryOptions = function generateQueryOptions(props, after) {\n    var queryOptions = (0, _helper.getQueryOptions)(props);\n    return props.showLoadMore ? (0, _utils.getCompositeAggsQuery)(queryOptions, props, after) : (0, _utils.getAggsQuery)(queryOptions, props);\n  };\n\n  MultiList.prototype.render = function render() {\n    var _this3 = this;\n\n    var _props3 = this.props,\n        selectAllLabel = _props3.selectAllLabel,\n        renderItem = _props3.renderItem,\n        showLoadMore = _props3.showLoadMore,\n        loadMoreLabel = _props3.loadMoreLabel,\n        renderError = _props3.renderError,\n        error = _props3.error;\n    var isLastBucket = this.state.isLastBucket;\n\n    if (this.props.isLoading && this.props.loader) {\n      return this.props.loader;\n    }\n\n    if (renderError && error) {\n      return (0, _utils2.isFunction)(renderError) ? renderError(error) : renderError;\n    }\n\n    if (this.state.options.length === 0) {\n      return null;\n    }\n\n    var itemsToRender = this.state.options;\n\n    if (this.props.transformData) {\n      itemsToRender = this.props.transformData(itemsToRender);\n    }\n\n    var listItems = itemsToRender.filter(function (item) {\n      if (String(item.key).length) {\n        if (_this3.props.showSearch && _this3.state.searchTerm) {\n          return String(item.key).toLowerCase().includes(_this3.state.searchTerm.toLowerCase());\n        }\n\n        return true;\n      }\n\n      return false;\n    });\n    return _react2.default.createElement(_Container2.default, {\n      style: this.props.style,\n      className: this.props.className\n    }, this.props.title && _react2.default.createElement(_Title2.default, {\n      className: (0, _helper.getClassName)(this.props.innerClass, 'title') || null\n    }, this.props.title), this.renderSearch(), _react2.default.createElement(_FormControlList.UL, {\n      className: (0, _helper.getClassName)(this.props.innerClass, 'list') || null\n    }, selectAllLabel ? _react2.default.createElement('li', {\n      key: selectAllLabel,\n      className: '' + (this.state.currentValue[selectAllLabel] ? 'active' : '')\n    }, _react2.default.createElement(_FormControlList.Checkbox, {\n      className: (0, _helper.getClassName)(this.props.innerClass, 'checkbox') || null,\n      id: this.props.componentId + '-' + selectAllLabel,\n      name: selectAllLabel,\n      value: selectAllLabel,\n      onChange: this.handleClick,\n      checked: !!this.state.currentValue[selectAllLabel],\n      show: this.props.showCheckbox\n    }), _react2.default.createElement('label', {\n      className: (0, _helper.getClassName)(this.props.innerClass, 'label') || null,\n      htmlFor: this.props.componentId + '-' + selectAllLabel\n    }, selectAllLabel)) : null, listItems.length ? listItems.map(function (item) {\n      return _react2.default.createElement('li', {\n        key: item.key,\n        className: '' + (_this3.state.currentValue[item.key] ? 'active' : '')\n      }, _react2.default.createElement(_FormControlList.Checkbox, {\n        className: (0, _helper.getClassName)(_this3.props.innerClass, 'checkbox') || null,\n        id: _this3.props.componentId + '-' + item.key,\n        name: _this3.props.componentId,\n        value: item.key,\n        onChange: _this3.handleClick,\n        checked: !!_this3.state.currentValue[item.key],\n        show: _this3.props.showCheckbox\n      }), _react2.default.createElement('label', {\n        className: (0, _helper.getClassName)(_this3.props.innerClass, 'label') || null,\n        htmlFor: _this3.props.componentId + '-' + item.key\n      }, renderItem ? renderItem(item.key, item.doc_count, !!_this3.state.currentValue[item.key]) : _react2.default.createElement('span', null, _react2.default.createElement('span', null, item.key), _this3.props.showCount && _react2.default.createElement('span', {\n        className: (0, _helper.getClassName)(_this3.props.innerClass, 'count') || null\n      }, item.doc_count))));\n    }) // prettier-ignore\n    : this.props.renderNoResults && this.props.renderNoResults(), showLoadMore && !isLastBucket && _react2.default.createElement('div', {\n      className: (0, _emotion.css)(_Button.loadMoreContainer)\n    }, _react2.default.createElement(_Button2.default, {\n      onClick: this.handleLoadMore\n    }, loadMoreLabel))));\n  };\n\n  return MultiList;\n}(_react.Component);\n\nMultiList.defaultQuery = function (value, props) {\n  var query = null;\n  var type = props.queryFormat === 'or' ? 'terms' : 'term';\n\n  if (!Array.isArray(value) || value.length === 0) {\n    return null;\n  }\n\n  if (props.selectAllLabel && value.includes(props.selectAllLabel)) {\n    if (props.showMissing) {\n      query = {\n        match_all: {}\n      };\n    } else {\n      query = {\n        exists: {\n          field: props.dataField\n        }\n      };\n    }\n  } else if (value) {\n    var listQuery = void 0;\n\n    if (props.queryFormat === 'or') {\n      if (props.showMissing) {\n        var _type, _ref;\n\n        var hasMissingTerm = value.includes(props.missingLabel);\n        var should = [(_ref = {}, _ref[type] = (_type = {}, _type[props.dataField] = value.filter(function (item) {\n          return item !== props.missingLabel;\n        }), _type), _ref)];\n\n        if (hasMissingTerm) {\n          should = should.concat({\n            bool: {\n              must_not: {\n                exists: {\n                  field: props.dataField\n                }\n              }\n            }\n          });\n        }\n\n        listQuery = {\n          bool: {\n            should: should\n          }\n        };\n      } else {\n        var _type2, _listQuery;\n\n        listQuery = (_listQuery = {}, _listQuery[type] = (_type2 = {}, _type2[props.dataField] = value, _type2), _listQuery);\n      }\n    } else {\n      // adds a sub-query with must as an array of objects for each term/value\n      var queryArray = value.map(function (item) {\n        var _type3, _ref2;\n\n        return _ref2 = {}, _ref2[type] = (_type3 = {}, _type3[props.dataField] = item, _type3), _ref2;\n      });\n      listQuery = {\n        bool: {\n          must: queryArray\n        }\n      };\n    }\n\n    query = value.length ? listQuery : null;\n  }\n\n  if (query && props.nestedField) {\n    return {\n      query: {\n        nested: {\n          path: props.nestedField,\n          query: query\n        }\n      }\n    };\n  }\n\n  return query;\n};\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this4 = this;\n\n  this.setReact = function (props) {\n    var react = props.react;\n\n    if (react) {\n      var newReact = (0, _helper.pushToAndClause)(react, _this4.internalComponent);\n      props.watchComponent(props.componentId, newReact);\n    } else {\n      props.watchComponent(props.componentId, {\n        and: _this4.internalComponent\n      });\n    }\n  };\n\n  this.getOptions = function (buckets, props) {\n    if (props.showLoadMore) {\n      return buckets.map(function (bucket) {\n        return {\n          key: bucket.key[props.dataField],\n          doc_count: bucket.doc_count\n        };\n      });\n    }\n\n    return buckets;\n  };\n\n  this.setValue = function (value) {\n    var isDefaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var props = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _this4.props;\n    var hasMounted = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true; // ignore state updates when component is locked\n\n    if (props.beforeValueChange && _this4.locked) {\n      return;\n    }\n\n    _this4.locked = true;\n    var selectAllLabel = props.selectAllLabel;\n    var currentValue = _this4.state.currentValue;\n    var finalValues = null;\n\n    if (selectAllLabel && (Array.isArray(value) && value.includes(selectAllLabel) || typeof value === 'string' && value === selectAllLabel)) {\n      if (currentValue[selectAllLabel] && hasMounted && !isDefaultValue) {\n        currentValue = {};\n        finalValues = [];\n      } else {\n        _this4.state.options.forEach(function (item) {\n          currentValue[item.key] = true;\n        });\n\n        currentValue[selectAllLabel] = true;\n        finalValues = [selectAllLabel];\n      }\n    } else if (isDefaultValue) {\n      finalValues = value;\n      currentValue = {};\n\n      if (value) {\n        value.forEach(function (item) {\n          currentValue[item] = true;\n        });\n      }\n\n      if (selectAllLabel && selectAllLabel in currentValue) {\n        var _currentValue = currentValue,\n            del = _currentValue[selectAllLabel],\n            obj = _objectWithoutProperties(_currentValue, [selectAllLabel]);\n\n        currentValue = _extends({}, obj);\n      }\n    } else {\n      if (currentValue[value]) {\n        var _currentValue2 = currentValue,\n            _del = _currentValue2[value],\n            rest = _objectWithoutProperties(_currentValue2, [value]);\n\n        currentValue = _extends({}, rest);\n      } else {\n        currentValue[value] = true;\n      }\n\n      if (selectAllLabel && selectAllLabel in currentValue) {\n        var _currentValue3 = currentValue,\n            _del2 = _currentValue3[selectAllLabel],\n            _obj = _objectWithoutProperties(_currentValue3, [selectAllLabel]);\n\n        currentValue = _extends({}, _obj);\n      }\n\n      finalValues = Object.keys(currentValue);\n    }\n\n    var performUpdate = function performUpdate() {\n      var handleUpdates = function handleUpdates() {\n        _this4.updateQuery(finalValues, props);\n\n        _this4.locked = false;\n        if (props.onValueChange) props.onValueChange(finalValues);\n      };\n\n      if (hasMounted) {\n        _this4.setState({\n          currentValue: currentValue\n        }, handleUpdates);\n      } else {\n        handleUpdates();\n      }\n    };\n\n    (0, _helper.checkValueChange)(props.componentId, finalValues, props.beforeValueChange, performUpdate);\n  };\n\n  this.updateQuery = function (value, props) {\n    var customQuery = props.customQuery;\n    var query = MultiList.defaultQuery(value, props);\n    var customQueryOptions = void 0;\n\n    if (customQuery) {\n      var _ref3 = customQuery(value, props) || {};\n\n      query = _ref3.query;\n      customQueryOptions = (0, _helper.getOptionsFromQuery)(customQuery(value, props));\n    }\n\n    props.setQueryOptions(props.componentId, customQueryOptions);\n    props.updateQuery({\n      componentId: props.componentId,\n      query: query,\n      value: value,\n      label: props.filterLabel,\n      showFilter: props.showFilter,\n      URLParams: props.URLParams,\n      componentType: 'MULTILIST'\n    });\n  };\n\n  this.updateQueryOptions = function (props) {\n    var addAfterKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false; // when using composite aggs flush the current options for a fresh query\n\n    if (props.showLoadMore && !addAfterKey) {\n      _this4.setState({\n        options: []\n      });\n    } // for a new query due to other changes don't append after to get fresh results\n\n\n    var queryOptions = MultiList.generateQueryOptions(props, addAfterKey ? _this4.state.after : {});\n\n    if (props.defaultQuery) {\n      var value = Object.keys(_this4.state.currentValue);\n      var defaultQueryOptions = (0, _helper.getOptionsFromQuery)(props.defaultQuery(value, props));\n      props.setQueryOptions(_this4.internalComponent, _extends({}, queryOptions, defaultQueryOptions));\n    } else {\n      props.setQueryOptions(_this4.internalComponent, queryOptions);\n    }\n  };\n\n  this.handleInputChange = function (e) {\n    var value = e.target.value;\n\n    _this4.setState({\n      searchTerm: value\n    });\n  };\n\n  this.handleLoadMore = function () {\n    var queryOptions = MultiList.generateQueryOptions(_this4.props, _this4.state.after);\n\n    _this4.props.loadMore(_this4.props.componentId, queryOptions);\n  };\n\n  this.renderSearch = function () {\n    if (_this4.props.showSearch) {\n      return _react2.default.createElement(_Input2.default, {\n        className: (0, _helper.getClassName)(_this4.props.innerClass, 'input') || null,\n        onChange: _this4.handleInputChange,\n        value: _this4.state.searchTerm,\n        placeholder: _this4.props.placeholder,\n        style: {\n          margin: '0 0 8px'\n        },\n        themePreset: _this4.props.themePreset\n      });\n    }\n\n    return null;\n  };\n\n  this.handleClick = function (e) {\n    var _props4 = _this4.props,\n        value = _props4.value,\n        onChange = _props4.onChange;\n    var listValue = e.target.value;\n\n    if (value === undefined) {\n      _this4.setValue(listValue);\n    } else if (onChange) {\n      onChange(listValue);\n    }\n  };\n};\n\nMultiList.propTypes = {\n  addComponent: _types2.default.funcRequired,\n  removeComponent: _types2.default.funcRequired,\n  setQueryListener: _types2.default.funcRequired,\n  setQueryOptions: _types2.default.funcRequired,\n  loadMore: _types2.default.funcRequired,\n  updateQuery: _types2.default.funcRequired,\n  watchComponent: _types2.default.funcRequired,\n  options: _types2.default.options,\n  selectedValue: _types2.default.selectedValue,\n  // component props\n  beforeValueChange: _types2.default.func,\n  className: _types2.default.string,\n  componentId: _types2.default.stringRequired,\n  customQuery: _types2.default.func,\n  defaultQuery: _types2.default.func,\n  dataField: _types2.default.stringRequired,\n  error: _types2.default.title,\n  nestedField: _types2.default.string,\n  defaultValue: _types2.default.stringArray,\n  value: _types2.default.stringArray,\n  filterLabel: _types2.default.string,\n  innerClass: _types2.default.style,\n  isLoading: _types2.default.bool,\n  loader: _types2.default.title,\n  onError: _types2.default.func,\n  renderNoResults: _types2.default.func,\n  onQueryChange: _types2.default.func,\n  onValueChange: _types2.default.func,\n  onChange: _types2.default.func,\n  placeholder: _types2.default.string,\n  queryFormat: _types2.default.queryFormatSearch,\n  react: _types2.default.react,\n  renderItem: _types2.default.func,\n  renderError: _types2.default.title,\n  transformData: _types2.default.func,\n  selectAllLabel: _types2.default.string,\n  showCheckbox: _types2.default.boolRequired,\n  showCount: _types2.default.bool,\n  showSearch: _types2.default.bool,\n  size: _types2.default.number,\n  sortBy: _types2.default.sortByWithCount,\n  style: _types2.default.style,\n  themePreset: _types2.default.themePreset,\n  title: _types2.default.title,\n  URLParams: _types2.default.bool,\n  showMissing: _types2.default.bool,\n  missingLabel: _types2.default.string,\n  showLoadMore: _types2.default.bool,\n  loadMoreLabel: _types2.default.title\n};\nMultiList.defaultProps = {\n  className: null,\n  placeholder: 'Search',\n  queryFormat: 'or',\n  showCheckbox: true,\n  showCount: true,\n  showSearch: true,\n  size: 100,\n  sortBy: 'count',\n  style: {},\n  URLParams: false,\n  showMissing: false,\n  missingLabel: 'N/A',\n  showLoadMore: false,\n  loadMoreLabel: 'Load More'\n};\n\nvar mapStateToProps = function mapStateToProps(state, props) {\n  return {\n    options: props.nestedField && state.aggregations[props.componentId] ? state.aggregations[props.componentId].reactivesearch_nested : state.aggregations[props.componentId],\n    selectedValue: state.selectedValues[props.componentId] && state.selectedValues[props.componentId].value || null,\n    isLoading: state.isLoading[props.componentId],\n    themePreset: state.config.themePreset,\n    error: state.error[props.componentId]\n  };\n};\n\nvar mapDispatchtoProps = function mapDispatchtoProps(dispatch) {\n  return {\n    addComponent: function addComponent(component) {\n      return dispatch((0, _actions.addComponent)(component));\n    },\n    removeComponent: function removeComponent(component) {\n      return dispatch((0, _actions.removeComponent)(component));\n    },\n    setQueryOptions: function setQueryOptions(component, props) {\n      return dispatch((0, _actions.setQueryOptions)(component, props));\n    },\n    loadMore: function loadMore(component, aggsQuery) {\n      return dispatch((0, _actions.loadMore)(component, aggsQuery, true, true));\n    },\n    setQueryListener: function setQueryListener(component, onQueryChange, beforeQueryChange) {\n      return dispatch((0, _actions.setQueryListener)(component, onQueryChange, beforeQueryChange));\n    },\n    updateQuery: function updateQuery(updateQueryObject) {\n      return dispatch((0, _actions.updateQuery)(updateQueryObject));\n    },\n    watchComponent: function watchComponent(component, react) {\n      return dispatch((0, _actions.watchComponent)(component, react));\n    }\n  };\n};\n\nvar ConnectedComponent = (0, _utils2.connect)(mapStateToProps, mapDispatchtoProps)(function (props) {\n  return _react2.default.createElement(MultiList, _extends({\n    ref: props.myForwardedRef\n  }, props));\n}); // eslint-disable-next-line\n\nvar ForwardRefComponent = _react2.default.forwardRef(function (props, ref) {\n  return _react2.default.createElement(ConnectedComponent, _extends({}, props, {\n    myForwardedRef: ref\n  }));\n});\n\n(0, _hoistNonReactStatics2.default)(ForwardRefComponent, MultiList);\nForwardRefComponent.name = 'MultiList';\nexports.default = ForwardRefComponent;","map":null,"metadata":{},"sourceType":"script"}