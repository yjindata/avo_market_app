{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _actions = require('@appbaseio/reactivecore/lib/actions');\n\nvar _hoistNonReactStatics = require('hoist-non-react-statics');\n\nvar _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);\n\nvar _helper = require('@appbaseio/reactivecore/lib/utils/helper');\n\nvar _types = require('@appbaseio/reactivecore/lib/utils/types');\n\nvar _types2 = _interopRequireDefault(_types);\n\nvar _Slider = require('rheostat/lib/Slider');\n\nvar _Slider2 = _interopRequireDefault(_Slider);\n\nvar _HistogramContainer = require('./addons/HistogramContainer');\n\nvar _HistogramContainer2 = _interopRequireDefault(_HistogramContainer);\n\nvar _RangeLabel = require('./addons/RangeLabel');\n\nvar _RangeLabel2 = _interopRequireDefault(_RangeLabel);\n\nvar _SliderHandle = require('./addons/SliderHandle');\n\nvar _SliderHandle2 = _interopRequireDefault(_SliderHandle);\n\nvar _Slider3 = require('../../styles/Slider');\n\nvar _Slider4 = _interopRequireDefault(_Slider3);\n\nvar _Title = require('../../styles/Title');\n\nvar _Title2 = _interopRequireDefault(_Title);\n\nvar _Label = require('../../styles/Label');\n\nvar _utils = require('../../utils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar RangeSlider = function (_Component) {\n  _inherits(RangeSlider, _Component);\n\n  function RangeSlider(props) {\n    _classCallCheck(this, RangeSlider);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _initialiseProps.call(_this);\n\n    var selectedValue = props.selectedValue,\n        defaultValue = props.defaultValue,\n        value = props.value;\n    var valueToParse = selectedValue || value || defaultValue;\n    var currentValue = RangeSlider.parseValue(valueToParse, props);\n    _this.state = {\n      currentValue: currentValue,\n      stats: []\n    };\n    _this.locked = false;\n    _this.internalComponent = _this.props.componentId + '__internal';\n    props.addComponent(props.componentId);\n    props.addComponent(_this.internalComponent);\n    props.setQueryListener(props.componentId, props.onQueryChange, null);\n\n    _this.updateQueryOptions(props);\n\n    _this.setReact(props);\n\n    var hasMounted = false;\n\n    if (currentValue) {\n      _this.handleChange(currentValue, props, hasMounted);\n    }\n\n    return _this;\n  }\n\n  RangeSlider.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var _this2 = this;\n\n    (0, _helper.checkPropChange)(this.props.react, prevProps.react, function () {\n      return _this2.setReact(_this2.props);\n    });\n    (0, _helper.checkSomePropChange)(this.props, prevProps, ['showHistogram', 'interval'], function () {\n      return _this2.updateQueryOptions(_this2.props);\n    });\n    (0, _helper.checkPropChange)(this.props.options, prevProps.options, function () {\n      var options = _this2.props.options;\n\n      if (Array.isArray(options)) {\n        options.sort(function (a, b) {\n          if (a.key < b.key) return -1;\n          if (a.key > b.key) return 1;\n          return 0;\n        });\n      }\n\n      _this2.setState({\n        stats: options || []\n      });\n    });\n    (0, _helper.checkSomePropChange)(this.props, prevProps, ['dataField', 'nestedField'], function () {\n      _this2.updateQueryOptions(_this2.props);\n\n      _this2.handleChange(_this2.state.currentValue, _this2.props);\n    });\n\n    if (!(0, _helper.isEqual)(this.props.value, prevProps.value)) {\n      var value = RangeSlider.parseValue(this.props.value, this.props);\n      this.handleChange(value, this.props);\n    } else if (!(0, _helper.isEqual)(this.state.currentValue, this.props.selectedValue) && !(0, _helper.isEqual)(this.props.selectedValue, prevProps.selectedValue)) {\n      var _props = this.props,\n          _value = _props.value,\n          onChange = _props.onChange;\n\n      if (_value === undefined) {\n        var selectedValue = RangeSlider.parseValue(this.props.selectedValue, this.props);\n        this.handleChange(selectedValue, this.props);\n      } else if (onChange) {\n        onChange(this.props.selectedValue || null);\n      } else {\n        this.handleChange(this.state.currentValue);\n      }\n    }\n  };\n\n  RangeSlider.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {\n    var upperLimit = Math.floor((nextProps.range.end - nextProps.range.start) / 2);\n\n    if (nextProps.stepValue < 1 || nextProps.stepValue > upperLimit) {\n      console.warn('stepValue for RangeSlider ' + nextProps.componentId + ' should be greater than 0 and less than or equal to ' + upperLimit);\n      return false;\n    }\n\n    return true;\n  };\n\n  RangeSlider.prototype.componentWillUnmount = function componentWillUnmount() {\n    this.props.removeComponent(this.props.componentId);\n    this.props.removeComponent(this.internalComponent);\n  };\n\n  RangeSlider.prototype.render = function render() {\n    var _this3 = this;\n\n    return _react2.default.createElement(_Slider4.default, {\n      primary: true,\n      style: this.props.style,\n      className: this.props.className\n    }, this.props.title && _react2.default.createElement(_Title2.default, {\n      className: (0, _helper.getClassName)(this.props.innerClass, 'title') || null\n    }, this.props.title), this.state.stats.length && this.props.showHistogram && this.props.showSlider ? _react2.default.createElement(_HistogramContainer2.default, {\n      stats: this.state.stats,\n      range: this.props.range,\n      interval: this.getValidInterval(this.props)\n    }) : null, this.props.showSlider && _react2.default.createElement(_Slider2.default, {\n      min: this.props.range.start,\n      max: this.props.range.end,\n      values: this.state.currentValue,\n      onChange: this.handleSlider,\n      onValuesUpdated: this.handleDrag,\n      snap: this.props.snap,\n      snapPoints: this.props.snap ? this.getSnapPoints() : null,\n      className: (0, _helper.getClassName)(this.props.innerClass, 'slider'),\n      handle: function handle(_ref) {\n        var className = _ref.className,\n            style = _ref.style,\n            passProps = _objectWithoutProperties(_ref, ['className', 'style']);\n\n        return _react2.default.createElement(_SliderHandle2.default, _extends({\n          style: style,\n          className: className\n        }, passProps, {\n          renderTooltipData: _this3.props.renderTooltipData,\n          tooltipTrigger: _this3.props.tooltipTrigger\n        }));\n      }\n    }), this.props.rangeLabels && this.props.showSlider && _react2.default.createElement('div', {\n      className: _Label.rangeLabelsContainer\n    }, _react2.default.createElement(_RangeLabel2.default, {\n      align: 'left',\n      className: (0, _helper.getClassName)(this.props.innerClass, 'label') || null\n    }, this.props.rangeLabels.start), _react2.default.createElement(_RangeLabel2.default, {\n      align: 'right',\n      className: (0, _helper.getClassName)(this.props.innerClass, 'label') || null\n    }, this.props.rangeLabels.end)));\n  };\n\n  return RangeSlider;\n}(_react.Component);\n\nRangeSlider.parseValue = function (value, props) {\n  if (Array.isArray(value)) return value;\n  return value ? [value.start, value.end] : [props.range.start, props.range.end];\n};\n\nRangeSlider.defaultQuery = function (value, props) {\n  var query = null;\n\n  if (Array.isArray(value) && value.length) {\n    var _range;\n\n    query = {\n      range: (_range = {}, _range[props.dataField] = {\n        gte: value[0],\n        lte: value[1],\n        boost: 2.0\n      }, _range)\n    };\n  }\n\n  if (query && props.nestedField) {\n    return {\n      query: {\n        nested: {\n          path: props.nestedField,\n          query: query\n        }\n      }\n    };\n  }\n\n  return query;\n};\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this4 = this;\n\n  this.setReact = function (props) {\n    var react = props.react;\n\n    if (react) {\n      var newReact = (0, _helper.pushToAndClause)(react, _this4.internalComponent);\n      props.watchComponent(props.componentId, newReact);\n    } else {\n      props.watchComponent(props.componentId, {\n        and: _this4.internalComponent\n      });\n    }\n  };\n\n  this.getSnapPoints = function () {\n    var snapPoints = [];\n    var stepValue = _this4.props.stepValue; // limit the number of steps to prevent generating a large number of snapPoints\n\n    if ((_this4.props.range.end - _this4.props.range.start) / stepValue > 100) {\n      stepValue = (_this4.props.range.end - _this4.props.range.start) / 100;\n    }\n\n    for (var i = _this4.props.range.start; i <= _this4.props.range.end; i += stepValue) {\n      snapPoints = snapPoints.concat(i);\n    }\n\n    if (snapPoints[snapPoints.length - 1] !== _this4.props.range.end) {\n      snapPoints = snapPoints.concat(_this4.props.range.end);\n    }\n\n    return snapPoints;\n  };\n\n  this.getValidInterval = function (props) {\n    var min = Math.ceil((props.range.end - props.range.start) / 100) || 1;\n\n    if (!props.interval) {\n      return min;\n    } else if (props.interval < min) {\n      console.error(props.componentId + ': interval prop\\'s value should be greater than or equal to ' + min);\n      return min;\n    }\n\n    return props.interval;\n  };\n\n  this.histogramQuery = function (props) {\n    var _ref2;\n\n    return _ref2 = {}, _ref2[props.dataField] = {\n      histogram: {\n        field: props.dataField,\n        interval: _this4.getValidInterval(props),\n        offset: props.range.start\n      }\n    }, _ref2;\n  };\n\n  this.handleChange = function (currentValue) {\n    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this4.props;\n    var hasMounted = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true; // ignore state updates when component is locked\n\n    if (props.beforeValueChange && _this4.locked) {\n      return;\n    }\n\n    _this4.locked = true;\n\n    var performUpdate = function performUpdate() {\n      var handleUpdates = function handleUpdates() {\n        var start = currentValue[0],\n            end = currentValue[1];\n\n        _this4.updateQuery([start, end], props);\n\n        _this4.locked = false;\n\n        if (props.onValueChange) {\n          props.onValueChange({\n            start: start,\n            end: end\n          });\n        }\n      };\n\n      var start = currentValue[0],\n          end = currentValue[1];\n      var range = props.range;\n\n      if (hasMounted && start <= end && start >= range.start && end <= range.end) {\n        _this4.setState({\n          currentValue: currentValue\n        }, handleUpdates);\n      } else {\n        handleUpdates();\n      }\n    };\n\n    (0, _helper.checkValueChange)(props.componentId, {\n      start: currentValue[0],\n      end: currentValue[1]\n    }, props.beforeValueChange, performUpdate);\n  };\n\n  this.handleSlider = function (_ref3) {\n    var values = _ref3.values;\n\n    if (!(0, _helper.isEqual)(values, _this4.state.currentValue)) {\n      var _props2 = _this4.props,\n          value = _props2.value,\n          onChange = _props2.onChange;\n\n      if (value === undefined) {\n        _this4.handleChange(values);\n      } else if (onChange) {\n        // force re-rendering to avail the currentValue\n        // in rheostat component since it doesn't respect\n        // the controlled behavior properly\n        _this4.forceUpdate();\n\n        onChange(values);\n      } else {\n        // since value prop is set & onChange is not defined\n        // we need to reset the slider position\n        // to the original 'value' prop\n        _this4.setState({\n          currentValue: _this4.state.currentValue\n        });\n      }\n    }\n  };\n\n  this.handleDrag = function (values) {\n    if (_this4.props.onDrag) {\n      var min = values.min,\n          max = values.max,\n          currentValue = values.values;\n\n      _this4.props.onDrag(currentValue, [min, max]);\n    }\n  };\n\n  this.updateQuery = function (value, props) {\n    var customQuery = props.customQuery;\n    var query = RangeSlider.defaultQuery(value, props);\n    var customQueryOptions = void 0;\n\n    if (customQuery) {\n      var _ref4 = customQuery(value, props) || {};\n\n      query = _ref4.query;\n      customQueryOptions = (0, _helper.getOptionsFromQuery)(customQuery(value, props));\n    }\n\n    var showFilter = props.showFilter,\n        _props$range = props.range,\n        start = _props$range.start,\n        end = _props$range.end;\n    var currentStart = value[0],\n        currentEnd = value[1]; // check if the slider is at its initial position\n\n    var isInitialValue = currentStart === start && currentEnd === end;\n    props.setQueryOptions(props.componentId, customQueryOptions);\n    props.updateQuery({\n      componentId: props.componentId,\n      query: query,\n      value: value,\n      label: props.filterLabel,\n      showFilter: showFilter && !isInitialValue,\n      URLParams: props.URLParams,\n      componentType: 'RANGESLIDER'\n    });\n  };\n\n  this.updateQueryOptions = function (props) {\n    if (props.showHistogram) {\n      var customQuery = props.customQuery;\n      var queryOptions = {\n        size: 0,\n        aggs: (props.histogramQuery || _this4.histogramQuery)(props)\n      };\n      var value = [props.range.start, props.range.end];\n      var query = customQuery || RangeSlider.defaultQuery;\n      var customQueryOptions = customQuery ? (0, _helper.getOptionsFromQuery)(customQuery(value, props)) : null;\n      props.setQueryOptions(_this4.internalComponent, _extends({}, queryOptions, customQueryOptions), false);\n      props.updateQuery({\n        componentId: _this4.internalComponent,\n        query: query(value, props)\n      });\n    }\n  };\n};\n\nRangeSlider.propTypes = {\n  addComponent: _types2.default.funcRequired,\n  removeComponent: _types2.default.funcRequired,\n  setQueryListener: _types2.default.funcRequired,\n  setQueryOptions: _types2.default.funcRequired,\n  updateQuery: _types2.default.funcRequired,\n  watchComponent: _types2.default.funcRequired,\n  options: _types2.default.options,\n  selectedValue: _types2.default.selectedValue,\n  // component props\n  beforeValueChange: _types2.default.func,\n  className: _types2.default.string,\n  componentId: _types2.default.stringRequired,\n  customQuery: _types2.default.func,\n  dataField: _types2.default.stringRequired,\n  defaultValue: _types2.default.range,\n  value: _types2.default.range,\n  filterLabel: _types2.default.string,\n  innerClass: _types2.default.style,\n  interval: _types2.default.number,\n  nestedField: _types2.default.string,\n  onDrag: _types2.default.func,\n  onQueryChange: _types2.default.func,\n  onValueChange: _types2.default.func,\n  onChange: _types2.default.func,\n  range: _types2.default.range,\n  rangeLabels: _types2.default.rangeLabels,\n  react: _types2.default.react,\n  showHistogram: _types2.default.bool,\n  histogramQuery: _types2.default.func,\n  showFilter: _types2.default.bool,\n  showSlider: _types2.default.bool,\n  tooltipTrigger: _types2.default.tooltipTrigger,\n  renderTooltipData: _types2.default.func,\n  snap: _types2.default.bool,\n  stepValue: _types2.default.number,\n  style: _types2.default.style,\n  title: _types2.default.title,\n  URLParams: _types2.default.bool\n};\nRangeSlider.defaultProps = {\n  className: null,\n  range: {\n    start: 0,\n    end: 10\n  },\n  showHistogram: true,\n  showSlider: true,\n  tooltipTrigger: 'none',\n  snap: true,\n  stepValue: 1,\n  showFilter: true,\n  style: {},\n  URLParams: false\n};\n\nvar mapStateToProps = function mapStateToProps(state, props) {\n  return {\n    options: state.aggregations[props.componentId] ? state.aggregations[props.componentId][props.dataField] && state.aggregations[props.componentId][props.dataField].buckets // eslint-disable-line\n    : [],\n    selectedValue: state.selectedValues[props.componentId] ? state.selectedValues[props.componentId].value : null\n  };\n};\n\nvar mapDispatchtoProps = function mapDispatchtoProps(dispatch) {\n  return {\n    addComponent: function addComponent(component) {\n      return dispatch((0, _actions.addComponent)(component));\n    },\n    removeComponent: function removeComponent(component) {\n      return dispatch((0, _actions.removeComponent)(component));\n    },\n    setQueryOptions: function setQueryOptions(component, props, execute) {\n      return dispatch((0, _actions.setQueryOptions)(component, props, execute));\n    },\n    setQueryListener: function setQueryListener(component, onQueryChange, beforeQueryChange) {\n      return dispatch((0, _actions.setQueryListener)(component, onQueryChange, beforeQueryChange));\n    },\n    updateQuery: function updateQuery(updateQueryObject) {\n      return dispatch((0, _actions.updateQuery)(updateQueryObject));\n    },\n    watchComponent: function watchComponent(component, react) {\n      return dispatch((0, _actions.watchComponent)(component, react));\n    }\n  };\n};\n\nvar ConnectedComponent = (0, _utils.connect)(mapStateToProps, mapDispatchtoProps)(function (props) {\n  return _react2.default.createElement(RangeSlider, _extends({\n    ref: props.myForwardedRef\n  }, props));\n}); // eslint-disable-next-line\n\nvar ForwardRefComponent = _react2.default.forwardRef(function (props, ref) {\n  return _react2.default.createElement(ConnectedComponent, _extends({}, props, {\n    myForwardedRef: ref\n  }));\n});\n\n(0, _hoistNonReactStatics2.default)(ForwardRefComponent, RangeSlider);\nForwardRefComponent.name = 'RangeSlider';\nexports.default = ForwardRefComponent;","map":null,"metadata":{},"sourceType":"script"}