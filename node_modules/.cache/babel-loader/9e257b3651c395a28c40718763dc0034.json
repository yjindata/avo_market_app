{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _actions = require('@appbaseio/reactivecore/lib/actions');\n\nvar _hoistNonReactStatics = require('hoist-non-react-statics');\n\nvar _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);\n\nvar _helper = require('@appbaseio/reactivecore/lib/utils/helper');\n\nvar _types = require('@appbaseio/reactivecore/lib/utils/types');\n\nvar _types2 = _interopRequireDefault(_types);\n\nvar _xdate = require('xdate');\n\nvar _xdate2 = _interopRequireDefault(_xdate);\n\nvar _DayPickerInput = require('react-day-picker/DayPickerInput');\n\nvar _DayPickerInput2 = _interopRequireDefault(_DayPickerInput);\n\nvar _emotionTheming = require('emotion-theming');\n\nvar _DateContainer = require('../../styles/DateContainer');\n\nvar _DateContainer2 = _interopRequireDefault(_DateContainer);\n\nvar _Title = require('../../styles/Title');\n\nvar _Title2 = _interopRequireDefault(_Title);\n\nvar _Flex = require('../../styles/Flex');\n\nvar _Flex2 = _interopRequireDefault(_Flex);\n\nvar _utils = require('../../utils');\n\nvar _CancelSvg = require('../shared/CancelSvg');\n\nvar _CancelSvg2 = _interopRequireDefault(_CancelSvg);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar DateRange = function (_Component) {\n  _inherits(DateRange, _Component);\n\n  function DateRange(props) {\n    _classCallCheck(this, DateRange);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _initialiseProps.call(_this);\n\n    var currentDate = props.defaultValue || props.value || null;\n\n    if (props.selectedValue) {\n      if (Array.isArray(props.selectedValue)) {\n        currentDate = {\n          start: new Date(props.selectedValue[0]),\n          end: new Date(props.selectedValue[1])\n        };\n      } else {\n        var _props$selectedValue = props.selectedValue,\n            start = _props$selectedValue.start,\n            end = _props$selectedValue.end;\n        currentDate = {\n          start: new Date(start),\n          end: new Date(end)\n        };\n      }\n    }\n\n    _this.state = {\n      currentDate: currentDate,\n      dateHovered: null,\n      startKey: 'on-start',\n      endKey: 'on-end'\n    };\n    _this.locked = false;\n    var hasMounted = false;\n    props.addComponent(props.componentId);\n    props.setQueryListener(props.componentId, props.onQueryChange, null);\n\n    _this.setReact(props);\n\n    if (currentDate) {\n      _this.handleDateChange(currentDate, false, props, hasMounted);\n    }\n\n    return _this;\n  }\n\n  DateRange.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var _this2 = this;\n\n    (0, _helper.checkPropChange)(this.props.react, prevProps.react, function () {\n      return _this2.setReact(_this2.props);\n    });\n\n    if (!(0, _helper.isEqual)(this.props.value, prevProps.value)) {\n      this.handleDateChange(this.props.value, false, this.props);\n    } else {\n      var currentDate = this.state.currentDate;\n      var selectedValue = this.props.selectedValue; // comparing array format of selectedValue with object form of the state if not null\n\n      if (!(0, _helper.isEqual)(currentDate ? [this.formatInputDate(currentDate.start), this.formatInputDate(currentDate.end)] // prettier-ignore\n      : null, selectedValue) && !(0, _helper.isEqual)(prevProps.selectedValue, selectedValue)) {\n        this.handleDateChange(selectedValue ? {\n          start: this.props.selectedValue[0] || '',\n          end: this.props.selectedValue[1] || '' // prettier-ignore\n\n        } : null, true, this.props);\n      }\n    }\n\n    (0, _helper.checkSomePropChange)(this.props, prevProps, ['dataField', 'nestedField'], function () {\n      return _this2.updateQuery(_this2.state.currentDate ? {\n        // we need the date in correct queryFormat\n        start: (0, _helper.formatDate)(_this2.state.currentDate.start, _this2.props),\n        end: (0, _helper.formatDate)(_this2.state.currentDate.end, _this2.props) // prettier-ignore\n\n      } : _this2.state.currentDate, _this2.props);\n    });\n  };\n\n  DateRange.prototype.componentWillUnmount = function componentWillUnmount() {\n    this.props.removeComponent(this.props.componentId);\n  };\n\n  DateRange.prototype.setReact = function setReact(props) {\n    if (props.react) {\n      props.watchComponent(props.componentId, props.react);\n    }\n  };\n\n  DateRange.prototype.render = function render() {\n    var _state = this.state,\n        currentDate = _state.currentDate,\n        dateHovered = _state.dateHovered;\n    var start = currentDate ? currentDate.start : '';\n    var end = currentDate ? currentDate.end : '';\n    var endDay = currentDate ? dateHovered : '';\n    var selectedDays = [start, {\n      from: start,\n      to: endDay\n    }];\n    var modifiers = {\n      start: start,\n      end: endDay\n    };\n    return _react2.default.createElement(_DateContainer2.default, {\n      range: true,\n      style: this.props.style,\n      className: this.props.className,\n      showBorder: !this.props.showClear\n    }, this.props.title && _react2.default.createElement(_Title2.default, {\n      className: (0, _helper.getClassName)(this.props.innerClass, 'title') || null\n    }, this.props.title), _react2.default.createElement(_Flex2.default, {\n      className: (0, _helper.getClassName)(this.props.innerClass, 'input-container') || null\n    }, _react2.default.createElement(_Flex2.default, {\n      flex: 2,\n      showBorder: this.props.showClear,\n      iconPosition: 'right',\n      style: {\n        background: this.props.theme.colors.backgroundColor || 'transparent'\n      }\n    }, _react2.default.createElement(_DayPickerInput2.default, _extends({\n      showOverlay: this.props.focused,\n      formatDate: this.formatInputDate,\n      value: start,\n      key: this.state.startKey,\n      placeholder: this.props.placeholder.start,\n      dayPickerProps: {\n        numberOfMonths: this.props.numberOfMonths,\n        initialMonth: this.props.initialMonth,\n        disabledDays: {\n          after: this.state.currentDate ? this.state.currentDate.end : ''\n        },\n        selectedDays: selectedDays,\n        modifiers: modifiers\n      },\n      onDayChange: this.handleStartDate,\n      inputProps: {\n        readOnly: true\n      },\n      classNames: {\n        container: (0, _helper.getClassName)(this.props.innerClass, 'daypicker-container') || 'DayPickerInput',\n        overlayWrapper: (0, _helper.getClassName)(this.props.innerClass, 'daypicker-overlay-wrapper') || 'DayPickerInput-OverlayWrapper',\n        overlay: (0, _helper.getClassName)(this.props.innerClass, 'daypicker-overlay') || 'DayPickerInput-Overlay'\n      }\n    }, this.props.dayPickerInputProps)), this.props.showClear && this.state.currentDate && this.state.currentDate.start && _react2.default.createElement(_CancelSvg2.default, {\n      onClick: this.clearDayPickerStart\n    })), _react2.default.createElement(_Flex2.default, {\n      justifyContent: 'center',\n      alignItems: 'center',\n      basis: '20px'\n    }, '-'), _react2.default.createElement(_Flex2.default, {\n      flex: 2,\n      showBorder: this.props.showClear,\n      iconPosition: 'right',\n      style: {\n        background: this.props.theme.colors.backgroundColor || 'transparent'\n      }\n    }, _react2.default.createElement(_DayPickerInput2.default, _extends({\n      ref: this.getEndDateRef,\n      showOverlay: this.props.focused,\n      formatDate: this.formatInputDate,\n      value: end,\n      key: this.state.endKey,\n      placeholder: this.props.placeholder.end,\n      dayPickerProps: {\n        numberOfMonths: this.props.numberOfMonths,\n        initialMonth: this.props.initialMonth,\n        onDayMouseEnter: this.handleDayMouseEnter,\n        disabledDays: {\n          before: this.state.currentDate ? this.state.currentDate.start : ''\n        },\n        selectedDays: selectedDays,\n        modifiers: modifiers\n      },\n      onDayChange: this.handleEndDate,\n      inputProps: {\n        readOnly: true\n      },\n      classNames: {\n        container: (0, _helper.getClassName)(this.props.innerClass, 'daypicker-container') || 'DayPickerInput',\n        overlayWrapper: (0, _helper.getClassName)(this.props.innerClass, 'daypicker-overlay-wrapper') || 'DayPickerInput-OverlayWrapper',\n        overlay: (0, _helper.getClassName)(this.props.innerClass, 'daypicker-overlay') || 'DayPickerInput-Overlay'\n      }\n    }, this.props.dayPickerInputProps)), this.props.showClear && this.state.currentDate && this.state.currentDate.end && _react2.default.createElement(_CancelSvg2.default, {\n      onClick: this.clearDayPickerEnd\n    }))));\n  };\n\n  return DateRange;\n}(_react.Component);\n\nDateRange.defaultQuery = function (value, props) {\n  var query = null;\n\n  if (value) {\n    if (Array.isArray(props.dataField) && props.dataField.length === 2) {\n      var _range, _range2;\n\n      query = {\n        bool: {\n          must: [{\n            range: (_range = {}, _range[props.dataField[0]] = {\n              lte: (0, _helper.formatDate)(new _xdate2.default(value.start), props)\n            }, _range)\n          }, {\n            range: (_range2 = {}, _range2[props.dataField[1]] = {\n              gte: (0, _helper.formatDate)(new _xdate2.default(value.end), props)\n            }, _range2)\n          }]\n        }\n      };\n    } else if (Array.isArray(props.dataField)) {\n      var _range3;\n\n      query = {\n        range: (_range3 = {}, _range3[props.dataField[0]] = {\n          gte: (0, _helper.formatDate)(new _xdate2.default(value.start), props),\n          lte: (0, _helper.formatDate)(new _xdate2.default(value.end), props)\n        }, _range3)\n      };\n    } else {\n      var _range4;\n\n      query = {\n        range: (_range4 = {}, _range4[props.dataField] = {\n          gte: (0, _helper.formatDate)(new _xdate2.default(value.start), props),\n          lte: (0, _helper.formatDate)(new _xdate2.default(value.end), props)\n        }, _range4)\n      };\n    }\n  }\n\n  if (query && props.nestedField) {\n    return {\n      query: {\n        nested: {\n          path: props.nestedField,\n          query: query\n        }\n      }\n    };\n  }\n\n  return query;\n};\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this3 = this;\n\n  this.formatInputDate = function (date) {\n    var xdate = new _xdate2.default(date);\n    return xdate.valid() ? xdate.toString('yyyy-MM-dd') : '';\n  };\n\n  this.getEndDateRef = function (ref) {\n    _this3.endDateRef = ref;\n  };\n\n  this.clearDayPickerStart = function () {\n    if (_this3.state.currentDate && _this3.state.currentDate.start !== '') {\n      var _props = _this3.props,\n          value = _props.value,\n          onChange = _props.onChange;\n\n      if (value === undefined) {\n        _this3.handleStartDate('', false); // resets the day picker component\n\n      } else if (onChange) {\n        onChange({\n          start: '',\n          end: _this3.state.currentDate.end\n        });\n      } else {\n        // Since value prop is defined and onChange is not define\n        // we keep the same date as in store\n        _this3.setState({\n          currentDate: _this3.state.currentDate\n        });\n      }\n    }\n  };\n\n  this.clearDayPickerEnd = function () {\n    if (_this3.state.currentDate && _this3.state.currentDate.end !== '') {\n      _this3.handleEndDate(''); // resets the day picker component\n\n\n      var _props2 = _this3.props,\n          value = _props2.value,\n          onChange = _props2.onChange;\n\n      if (value === undefined) {\n        _this3.handleEndDate('', false); // resets the day picker component\n\n      } else if (onChange) {\n        onChange({\n          start: _this3.state.currentDate.start,\n          end: ''\n        });\n      } else {\n        // Since value prop is defined and onChange is not define\n        // we keep the same date as in store\n        _this3.setState({\n          currentDate: _this3.state.currentDate\n        });\n      }\n    }\n  };\n\n  this.handleStartDate = function (date) {\n    var autoFocus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    var currentDate = _this3.state.currentDate;\n    var end = currentDate ? currentDate.end : '';\n    var _props3 = _this3.props,\n        value = _props3.value,\n        onChange = _props3.onChange;\n\n    if (value === undefined) {\n      _this3.handleDateChange({\n        start: date,\n        end: end\n      });\n    } else if (onChange) {\n      onChange({\n        start: date,\n        end: end\n      });\n    } else {\n      // this will trigger a remount on the date component\n      // since DayPickerInput doesn't respect the controlled behavior setting on its own\n      _this3.setState(function (state) {\n        return {\n          startKey: state.startKey === 'on-start' ? 'off-start' : 'on-start'\n        };\n      });\n    } // focus the end date DayPicker if its empty\n\n\n    if (_this3.props.autoFocusEnd && autoFocus) {\n      // TODO: replace with a single date component in v2.1.0\n      window.setTimeout(function () {\n        return _this3.endDateRef.getInput().focus();\n      }, 0);\n    }\n  };\n\n  this.handleEndDate = function (date) {\n    var currentDate = _this3.state.currentDate;\n    var _props4 = _this3.props,\n        value = _props4.value,\n        onChange = _props4.onChange;\n    var start = currentDate ? currentDate.start : '';\n\n    if (value === undefined) {\n      _this3.handleDateChange({\n        start: start,\n        end: date\n      });\n    } else if (onChange) {\n      onChange({\n        start: start,\n        end: date\n      });\n    } else {\n      // this will trigger a remount on the date component\n      // since DayPickerInput doesn't respect the controlled behavior setting on its own\n      _this3.setState(function (state) {\n        return {\n          endKey: state.endKey === 'on-end' ? 'off-end' : 'on-end'\n        };\n      });\n    }\n  };\n\n  this.handleDayMouseEnter = function (day) {\n    _this3.setState({\n      dateHovered: day\n    });\n  };\n\n  this.handleDateChange = function (currentDate) {\n    var isDefaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var props = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _this3.props;\n    var hasMounted = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true; // ignore state updates when component is locked\n\n    if (props.beforeValueChange && _this3.locked) {\n      return;\n    }\n\n    _this3.locked = true;\n    var value = null;\n\n    if (currentDate && !(currentDate.start === '' && currentDate.end === '')) {\n      value = isDefaultValue ? currentDate : {\n        start: _this3.formatInputDate(currentDate.start),\n        end: _this3.formatInputDate(currentDate.end)\n      }; // prettier-ignore\n    }\n\n    var performUpdate = function performUpdate() {\n      var handleUpdates = function handleUpdates() {\n        _this3.updateQuery(value, props);\n\n        _this3.locked = false;\n        if (props.onValueChange) props.onValueChange(value);\n      };\n\n      if (hasMounted) {\n        _this3.setState({\n          currentDate: currentDate\n        }, handleUpdates);\n      } else {\n        handleUpdates();\n      }\n    };\n\n    (0, _helper.checkValueChange)(props.componentId, value, props.beforeValueChange, performUpdate);\n  };\n\n  this.updateQuery = function (value, props) {\n    if (!value || value && value.start.length && value.end.length) {\n      var customQuery = props.customQuery;\n      var query = DateRange.defaultQuery(value, props);\n      var customQueryOptions = void 0;\n\n      if (customQuery) {\n        var customQueryObject = customQuery(value, props);\n        query = customQueryObject && customQueryObject.query;\n        customQueryOptions = (0, _helper.getOptionsFromQuery)(customQuery(value, props));\n      }\n\n      props.setQueryOptions(props.componentId, customQueryOptions);\n      props.updateQuery({\n        componentId: props.componentId,\n        query: query,\n        value: value ? [value.start, value.end] : null,\n        showFilter: props.showFilter,\n        label: props.filterLabel,\n        URLParams: props.URLParams,\n        componentType: 'DATERANGE'\n      });\n    }\n  };\n};\n\nDateRange.propTypes = {\n  addComponent: _types2.default.funcRequired,\n  removeComponent: _types2.default.funcRequired,\n  setQueryListener: _types2.default.funcRequired,\n  updateQuery: _types2.default.funcRequired,\n  watchComponent: _types2.default.funcRequired,\n  selectedValue: _types2.default.selectedValue,\n  setQueryOptions: _types2.default.funcRequired,\n  // component props\n  autoFocusEnd: _types2.default.bool,\n  className: _types2.default.string,\n  componentId: _types2.default.stringRequired,\n  dataField: _types2.default.dataFieldArray,\n  dayPickerInputProps: _types2.default.props,\n  defaultValue: _types2.default.dateObject,\n  value: _types2.default.dateObject,\n  filterLabel: _types2.default.string,\n  focused: _types2.default.bool,\n  initialMonth: _types2.default.dateObject,\n  innerClass: _types2.default.style,\n  numberOfMonths: _types2.default.number,\n  onQueryChange: _types2.default.func,\n  onValueChange: _types2.default.func,\n  onChange: _types2.default.func,\n  placeholder: _types2.default.rangeLabels,\n  nestedField: _types2.default.string,\n  queryFormat: _types2.default.queryFormatDate,\n  react: _types2.default.react,\n  showClear: _types2.default.bool,\n  showFilter: _types2.default.bool,\n  style: _types2.default.style,\n  theme: _types2.default.style,\n  title: _types2.default.string\n};\nDateRange.defaultProps = {\n  autoFocusEnd: true,\n  numberOfMonths: 2,\n  placeholder: {\n    start: 'Start date',\n    end: 'End date'\n  },\n  showClear: true,\n  showFilter: true\n};\n\nvar mapStateToProps = function mapStateToProps(state, props) {\n  return {\n    selectedValue: state.selectedValues[props.componentId] ? state.selectedValues[props.componentId].value : null\n  };\n};\n\nvar mapDispatchtoProps = function mapDispatchtoProps(dispatch) {\n  return {\n    addComponent: function addComponent(component) {\n      return dispatch((0, _actions.addComponent)(component));\n    },\n    removeComponent: function removeComponent(component) {\n      return dispatch((0, _actions.removeComponent)(component));\n    },\n    updateQuery: function updateQuery(updateQueryObject) {\n      return dispatch((0, _actions.updateQuery)(updateQueryObject));\n    },\n    watchComponent: function watchComponent(component, react) {\n      return dispatch((0, _actions.watchComponent)(component, react));\n    },\n    setQueryListener: function setQueryListener(component, onQueryChange, beforeQueryChange) {\n      return dispatch((0, _actions.setQueryListener)(component, onQueryChange, beforeQueryChange));\n    },\n    setQueryOptions: function setQueryOptions(component, props) {\n      return dispatch((0, _actions.setQueryOptions)(component, props));\n    }\n  };\n};\n\nvar ConnectedComponent = (0, _utils.connect)(mapStateToProps, mapDispatchtoProps)((0, _emotionTheming.withTheme)(function (props) {\n  return _react2.default.createElement(DateRange, _extends({\n    ref: props.myForwardedRef\n  }, props));\n})); // eslint-disable-next-line\n\nvar ForwardRefComponent = _react2.default.forwardRef(function (props, ref) {\n  return _react2.default.createElement(ConnectedComponent, _extends({}, props, {\n    myForwardedRef: ref\n  }));\n});\n\n(0, _hoistNonReactStatics2.default)(ForwardRefComponent, DateRange);\nForwardRefComponent.name = 'DateRange';\nexports.default = ForwardRefComponent;","map":null,"metadata":{},"sourceType":"script"}