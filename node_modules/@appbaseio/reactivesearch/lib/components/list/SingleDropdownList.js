'use strict';

exports.__esModule = true;

var _emotion = require('emotion');

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _actions = require('@appbaseio/reactivecore/lib/actions');

var _hoistNonReactStatics = require('hoist-non-react-statics');

var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

var _helper = require('@appbaseio/reactivecore/lib/utils/helper');

var _types = require('@appbaseio/reactivecore/lib/utils/types');

var _types2 = _interopRequireDefault(_types);

var _utils = require('./utils');

var _Title = require('../../styles/Title');

var _Title2 = _interopRequireDefault(_Title);

var _Container = require('../../styles/Container');

var _Container2 = _interopRequireDefault(_Container);

var _Button = require('../../styles/Button');

var _Button2 = _interopRequireDefault(_Button);

var _Dropdown = require('../shared/Dropdown');

var _Dropdown2 = _interopRequireDefault(_Dropdown);

var _utils2 = require('../../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SingleDropdownList = function (_Component) {
	_inherits(SingleDropdownList, _Component);

	function SingleDropdownList(props) {
		_classCallCheck(this, SingleDropdownList);

		var _this = _possibleConstructorReturn(this, _Component.call(this, props));

		_initialiseProps.call(_this);

		var defaultValue = props.defaultValue || props.value;
		var currentValue = props.selectedValue || defaultValue;

		_this.state = {
			currentValue: currentValue || '',
			options: [],
			after: {}, // for composite aggs
			isLastBucket: false
		};
		_this.locked = false;
		_this.internalComponent = props.componentId + '__internal';

		props.addComponent(_this.internalComponent);
		props.addComponent(props.componentId);
		props.setQueryListener(props.componentId, props.onQueryChange, props.onError);
		_this.updateQueryOptions(props);

		_this.setReact(props);
		var hasMounted = false;

		if (currentValue) {
			_this.setValue(currentValue, props, hasMounted);
		}
		return _this;
	}

	SingleDropdownList.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
		var _this2 = this;

		(0, _helper.checkPropChange)(this.props.react, prevProps.react, function () {
			return _this2.setReact(_this2.props);
		});
		(0, _helper.checkPropChange)(this.props.options, prevProps.options, function () {
			var _props = _this2.props,
			    showLoadMore = _props.showLoadMore,
			    dataField = _props.dataField;
			var options = _this2.state.options;

			if (showLoadMore) {
				// append options with showLoadMore
				var buckets = _this2.props.options[dataField].buckets;

				var nextOptions = [].concat(options, buckets.map(function (bucket) {
					return {
						key: bucket.key[dataField],
						doc_count: bucket.doc_count
					};
				}));
				var after = _this2.props.options[dataField].after_key;
				// detect the last bucket by checking if the next set of buckets were empty
				var isLastBucket = !buckets.length;
				_this2.setState({
					after: {
						after: after
					},
					isLastBucket: isLastBucket,
					options: nextOptions
				});
			} else {
				_this2.setState({
					options: _this2.props.options[dataField] ? _this2.props.options[dataField].buckets : []
				});
			}
		});
		(0, _helper.checkSomePropChange)(this.props, prevProps, ['size', 'sortBy'], function () {
			return _this2.updateQueryOptions(_this2.props);
		});

		(0, _helper.checkPropChange)(this.props.dataField, prevProps.dataField, function () {
			_this2.updateQueryOptions(_this2.props);
			_this2.updateQuery(_this2.state.currentValue, _this2.props);
		});

		if (this.props.value !== prevProps.value) {
			this.setValue(this.props.value);
		} else if (this.state.currentValue !== this.props.selectedValue && this.props.selectedValue !== prevProps.selectedValue) {
			var _props2 = this.props,
			    value = _props2.value,
			    onChange = _props2.onChange;


			if (value === undefined) {
				this.setValue(this.props.selectedValue || '');
			} else if (onChange) {
				onChange(this.props.selectedValue || '');
			} else {
				this.setValue(this.state.currentValue);
			}
		}
	};

	SingleDropdownList.prototype.componentWillUnmount = function componentWillUnmount() {
		this.props.removeComponent(this.props.componentId);
		this.props.removeComponent(this.internalComponent);
	};

	SingleDropdownList.generateQueryOptions = function generateQueryOptions(props, after) {
		var queryOptions = (0, _helper.getQueryOptions)(props);
		return props.showLoadMore ? (0, _utils.getCompositeAggsQuery)(queryOptions, props, after) : (0, _utils.getAggsQuery)(queryOptions, props);
	};

	SingleDropdownList.prototype.render = function render() {
		var _props3 = this.props,
		    showLoadMore = _props3.showLoadMore,
		    loadMoreLabel = _props3.loadMoreLabel,
		    renderError = _props3.renderError,
		    error = _props3.error;
		var isLastBucket = this.state.isLastBucket;

		var selectAll = [];

		if (this.props.isLoading && this.props.loader) {
			return this.props.loader;
		}

		if (renderError && error) {
			return (0, _utils2.isFunction)(renderError) ? renderError(error) : renderError;
		}

		if (this.state.options.length === 0) {
			return null;
		}

		if (this.props.selectAllLabel) {
			selectAll = [{
				key: this.props.selectAllLabel
			}];
		}

		return _react2.default.createElement(
			_Container2.default,
			{ style: this.props.style, className: this.props.className },
			this.props.title && _react2.default.createElement(
				_Title2.default,
				{ className: (0, _helper.getClassName)(this.props.innerClass, 'title') || null },
				this.props.title
			),
			_react2.default.createElement(_Dropdown2.default, {
				innerClass: this.props.innerClass,
				items: [].concat(selectAll, this.state.options.filter(function (item) {
					return String(item.key).trim().length;
				}).map(function (item) {
					return _extends({}, item, { key: String(item.key) });
				})),
				onChange: this.handleChange,
				selectedItem: this.state.currentValue,
				placeholder: this.props.placeholder,
				labelField: 'key',
				showCount: this.props.showCount,
				themePreset: this.props.themePreset,
				renderItem: this.props.renderItem,
				renderNoResults: this.props.renderNoResults,
				showSearch: this.props.showSearch,
				transformData: this.props.transformData,
				footer: showLoadMore && !isLastBucket && _react2.default.createElement(
					'div',
					{
						className: (0, _emotion.css)(_Button.loadMoreContainer)
					},
					_react2.default.createElement(
						_Button2.default,
						{ onClick: this.handleLoadMore },
						loadMoreLabel
					)
				)
			})
		);
	};

	return SingleDropdownList;
}(_react.Component);

SingleDropdownList.defaultQuery = function (value, props) {
	var query = null;
	if (props.selectAllLabel && props.selectAllLabel === value) {
		if (props.showMissing) {
			query = { match_all: {} };
		}
		query = {
			exists: {
				field: props.dataField
			}
		};
	} else if (value) {
		var _term;

		if (props.showMissing && props.missingLabel === value) {
			query = {
				bool: {
					must_not: {
						exists: { field: props.dataField }
					}
				}
			};
		}
		query = {
			term: (_term = {}, _term[props.dataField] = value, _term)
		};
	}

	if (query && props.nestedField) {
		return {
			query: {
				nested: {
					path: props.nestedField,
					query: query
				}
			}
		};
	}

	return query;
};

var _initialiseProps = function _initialiseProps() {
	var _this3 = this;

	this.setReact = function (props) {
		var react = props.react;

		if (react) {
			var newReact = (0, _helper.pushToAndClause)(react, _this3.internalComponent);
			props.watchComponent(props.componentId, newReact);
		} else {
			props.watchComponent(props.componentId, {
				and: _this3.internalComponent
			});
		}
	};

	this.setValue = function (value) {
		var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this3.props;
		var hasMounted = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

		// ignore state updates when component is locked
		if (props.beforeValueChange && _this3.locked) {
			return;
		}

		_this3.locked = true;
		var performUpdate = function performUpdate() {
			var handleUpdates = function handleUpdates() {
				_this3.updateQuery(value, props);
				_this3.locked = false;
				if (props.onValueChange) props.onValueChange(value);
			};

			if (hasMounted) {
				_this3.setState({
					currentValue: value
				}, handleUpdates);
			} else {
				handleUpdates();
			}
		};

		(0, _helper.checkValueChange)(props.componentId, value, props.beforeValueChange, performUpdate);
	};

	this.updateQuery = function (value, props) {
		var customQuery = props.customQuery;

		var query = SingleDropdownList.defaultQuery(value, props);
		var customQueryOptions = void 0;
		if (customQuery) {
			var _ref = customQuery(value, props) || {};

			query = _ref.query;

			customQueryOptions = (0, _helper.getOptionsFromQuery)(customQuery(value, props));
		}
		props.setQueryOptions(props.componentId, customQueryOptions);
		props.updateQuery({
			componentId: props.componentId,
			query: query,
			value: value,
			label: props.filterLabel,
			showFilter: props.showFilter,
			URLParams: props.URLParams,
			componentType: 'SINGLEDROPDOWNLIST'
		});
	};

	this.updateQueryOptions = function (props) {
		var addAfterKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

		// when using composite aggs flush the current options for a fresh query
		if (props.showLoadMore && !addAfterKey) {
			_this3.setState({
				options: []
			});
		}
		// for a new query due to other changes don't append after to get fresh results
		var queryOptions = SingleDropdownList.generateQueryOptions(props, addAfterKey ? _this3.state.after : {});
		if (props.defaultQuery) {
			var value = _this3.state.currentValue;
			var defaultQueryOptions = (0, _helper.getOptionsFromQuery)(props.defaultQuery(value, props));
			props.setQueryOptions(_this3.internalComponent, _extends({}, queryOptions, defaultQueryOptions));
		} else {
			props.setQueryOptions(_this3.internalComponent, queryOptions);
		}
	};

	this.handleLoadMore = function () {
		_this3.updateQueryOptions(_this3.props, true);
	};

	this.handleChange = function (item) {
		var _props4 = _this3.props,
		    value = _props4.value,
		    onChange = _props4.onChange;

		if (value === undefined) {
			_this3.setValue(item);
		} else if (onChange) {
			onChange(item);
		}
	};
};

SingleDropdownList.propTypes = {
	addComponent: _types2.default.funcRequired,
	removeComponent: _types2.default.funcRequired,
	setQueryListener: _types2.default.funcRequired,
	setQueryOptions: _types2.default.funcRequired,
	updateQuery: _types2.default.funcRequired,
	watchComponent: _types2.default.funcRequired,
	options: _types2.default.options,
	selectedValue: _types2.default.selectedValue,
	// component props
	beforeValueChange: _types2.default.func,
	className: _types2.default.string,
	componentId: _types2.default.stringRequired,
	customQuery: _types2.default.func,
	defaultQuery: _types2.default.func,
	dataField: _types2.default.stringRequired,
	defaultValue: _types2.default.string,
	error: _types2.default.title,
	value: _types2.default.string,
	filterLabel: _types2.default.string,
	innerClass: _types2.default.style,
	isLoading: _types2.default.bool,
	loader: _types2.default.title,
	onQueryChange: _types2.default.func,
	onValueChange: _types2.default.func,
	onChange: _types2.default.func,
	onError: _types2.default.func,
	placeholder: _types2.default.string,
	react: _types2.default.react,
	renderItem: _types2.default.func,
	renderError: _types2.default.title,
	renderNoResults: _types2.default.func,
	transformData: _types2.default.func,
	selectAllLabel: _types2.default.string,
	showCount: _types2.default.bool,
	showFilter: _types2.default.bool,
	size: _types2.default.number,
	sortBy: _types2.default.sortByWithCount,
	style: _types2.default.style,
	title: _types2.default.title,
	themePreset: _types2.default.themePreset,
	URLParams: _types2.default.bool,
	showMissing: _types2.default.bool,
	missingLabel: _types2.default.string,
	showSearch: _types2.default.bool,
	showLoadMore: _types2.default.bool,
	loadMoreLabel: _types2.default.title,
	nestedField: _types2.default.string
};

SingleDropdownList.defaultProps = {
	className: null,
	placeholder: 'Select a value',
	showCount: true,
	showFilter: true,
	size: 100,
	sortBy: 'count',
	style: {},
	URLParams: false,
	showMissing: false,
	missingLabel: 'N/A',
	showSearch: false,
	showLoadMore: false,
	loadMoreLabel: 'Load More'
};

var mapStateToProps = function mapStateToProps(state, props) {
	return {
		options: props.nestedField && state.aggregations[props.componentId] ? state.aggregations[props.componentId].reactivesearch_nested : state.aggregations[props.componentId],
		selectedValue: state.selectedValues[props.componentId] && state.selectedValues[props.componentId].value || '',
		isLoading: state.isLoading[props.componentId],
		themePreset: state.config.themePreset,
		error: state.error[props.componentId]
	};
};

var mapDispatchtoProps = function mapDispatchtoProps(dispatch) {
	return {
		addComponent: function addComponent(component) {
			return dispatch((0, _actions.addComponent)(component));
		},
		removeComponent: function removeComponent(component) {
			return dispatch((0, _actions.removeComponent)(component));
		},
		setQueryOptions: function setQueryOptions(component, props) {
			return dispatch((0, _actions.setQueryOptions)(component, props));
		},
		setQueryListener: function setQueryListener(component, onQueryChange, beforeQueryChange) {
			return dispatch((0, _actions.setQueryListener)(component, onQueryChange, beforeQueryChange));
		},
		updateQuery: function updateQuery(updateQueryObject) {
			return dispatch((0, _actions.updateQuery)(updateQueryObject));
		},
		watchComponent: function watchComponent(component, react) {
			return dispatch((0, _actions.watchComponent)(component, react));
		}
	};
};

var ConnectedComponent = (0, _utils2.connect)(mapStateToProps, mapDispatchtoProps)(function (props) {
	return _react2.default.createElement(SingleDropdownList, _extends({ ref: props.myForwardedRef }, props));
});

// eslint-disable-next-line
var ForwardRefComponent = _react2.default.forwardRef(function (props, ref) {
	return _react2.default.createElement(ConnectedComponent, _extends({}, props, { myForwardedRef: ref }));
});
(0, _hoistNonReactStatics2.default)(ForwardRefComponent, SingleDropdownList);

ForwardRefComponent.name = 'SingleDropdownList';
exports.default = ForwardRefComponent;