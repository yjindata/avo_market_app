/* 
 * Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
*/
const fs = require('fs-extra')
const chalk = require('chalk')
const path = require('path')
const moment = require('moment')
const lineByLine = require('n-readlines')

const awsMobileRegions = require('./aws-regions.js').regions
const awsConfigProfileReader = require('./aws-config-profile-reader.js')
const projectInfoManager = require('../project-info-manager.js')
const awsmobilejsConstant = require('../utils/awsmobilejs-constant.js')
const nameManager = require('../utils/awsmobilejs-name-manager.js')
const pathManager = require('../utils/awsmobilejs-path-manager.js')

function resolve(silentFlag){
    ensureFolderStructure()
    let projectInfo = projectInfoManager.getProjectInfo(true)

    if(projectInfo){
        awsInfo = resolve_project_awsConfig(projectInfo, silentFlag)
    }else{
        awsInfo = resolve_general_awsConfig(silentFlag)
    }

    return awsInfo
}

function setProfile(profileName){
    let isSuccessful = true
    let awsConfig = awsConfigProfileReader.getSystemConfig(profileName)
    if(awsConfig){
        ensureFolderStructure()
        let awsInfoFilePath = pathManager.getGeneralAWSInfoFilePath()
    
        let projectInfo = projectInfoManager.getProjectInfo(true)
        if(projectInfo){
            awsInfoFilePath = pathManager.getAWSInfoFilePath(projectInfo.ProjectPath)
        }

        let awsInfo = awsInfoTemplate
        let executeSet = true
        if(fs.existsSync(awsInfoFilePath)){
            awsInfo = JSON.parse(fs.readFileSync(awsInfoFilePath, 'utf8'))
            if(awsInfo.IsUsingProfile && awsInfo.ProfileName == profileName){
                executeSet = false
            }
        }
    
        if(executeSet){
            awsInfo.IsUsingProfile = true
            awsInfo.ProfileName = profileName
            awsInfo.AWSInfoFilePath = awsInfoFilePath
            if(!awsInfo.AWSConfigFilePath){
                awsInfo.AWSConfigFilePath = path.normalize(path.join(pathManager.getSysProjectAWSConfigDirPath(), nameManager.generateAWSConfigFileName(projectInfo)))
            }
            awsInfo.LastProfileSyncTime = moment().format(awsmobilejsConstant.DateTimeFormatString) 

            let jsonString = JSON.stringify(awsInfo, null, '\t')
            fs.writeFileSync(awsInfoFilePath, jsonString, 'utf8')

            let awsConfigJsonString = JSON.stringify(awsConfig)
            fs.writeFileSync(awsInfo.AWSConfigFilePath, awsConfigJsonString, 'utf8')
        }
    }else{
        isSuccessful = false
    }

    return isSuccessful
}

function setNoProfileSync(awsInfo){ 
    awsInfo.IsUsingProfile = false
    awsInfo.ProfileName = ""
    awsInfo.LastProfileSyncTime = ""
    let jsonString = JSON.stringify(awsInfo, null, '\t')
    fs.writeFileSync(awsInfo.AWSInfoFilePath, jsonString, 'utf8')
    return awsInfo
}

//////////////////////////////////////
function resolve_general_awsConfig(silentFlag){
    let awsInfoFilePath = pathManager.getGeneralAWSInfoFilePath()
    let awsConfigFilePath = pathManager.getGeneralAWSConfigFilePath()

    let awsInfo = awsInfoTemplate
    if(!fs.existsSync(awsInfoFilePath)){
        if(fs.existsSync(awsConfigFilePath)){ //meaning it was generated by older version of the cli
            awsInfo.IsUsingProfile = false
            awsInfo.ProfileName = ""
        }else{ //meaning this usage is started from fresh
            awsInfo.IsUsingProfile = true
            awsInfo.ProfileName = "default"
        }
        awsInfo.AWSInfoFilePath = awsInfoFilePath
        awsInfo.AWSConfigFilePath = awsConfigFilePath
        awsInfo.LastProfileSyncTime = ""
        let jsonString = JSON.stringify(awsInfo, null, '\t')
        fs.writeFileSync(awsInfoFilePath, jsonString, 'utf8')
    }else{
        awsInfo = JSON.parse(fs.readFileSync(awsInfoFilePath, 'utf8'))
    }

    let executeSyncProfile = false
    if(fs.existsSync(awsConfigFilePath)){
        executeSyncProfile = isSyncProfileNeeded(awsInfo)
    }else{
        if(awsInfo.IsUsingProfile){
            executeSyncProfile = true
        }else{
            let awsConfig = awsConfigTemplate
            let jsonString = JSON.stringify(awsConfig)
            fs.writeFileSync(awsConfigFilePath, jsonString, 'utf8')
        }
    }
    if(executeSyncProfile){
        syncProfile(awsInfo, silentFlag)
    }
    return awsInfo
}

function resolve_project_awsConfig(projectInfo, silentFlag){
    let awsInfo 
    let awsInfoFilePath = pathManager.getAWSInfoFilePath(projectInfo.ProjectPath)
    if(!fs.existsSync(awsInfoFilePath)){
        awsInfo = resolve_general_awsConfig(silentFlag)
        let generalAWSConfigFilePath = awsInfo.AWSConfigFilePath
        awsInfo.AWSInfoFilePath = awsInfoFilePath
        awsInfo.AWSConfigFilePath = path.normalize(path.join(pathManager.getSysProjectAWSConfigDirPath(), nameManager.generateAWSConfigFileName(projectInfo)))
        fs.copySync(generalAWSConfigFilePath, awsInfo.AWSConfigFilePath)
        let jsonString = JSON.stringify(awsInfo, null, '\t')
        fs.writeFileSync(awsInfoFilePath, jsonString, 'utf8')
    }else{
        awsInfo = JSON.parse(fs.readFileSync(awsInfoFilePath, 'utf8'))
        let awsConfigFilePath = awsInfo.AWSConfigFilePath
    
        let executeSyncProfile = false
        if(fs.existsSync(awsConfigFilePath)){
            executeSyncProfile = isSyncProfileNeeded(awsInfo)
        }else{
            if(awsInfo.IsUsingProfile){
                executeSyncProfile = true
            }else{
                let awsConfig = awsConfigTemplate
                let jsonString = JSON.stringify(awsConfig)
                fs.writeFileSync(awsConfigFilePath, jsonString, 'utf8')
            }
        }
        if(executeSyncProfile){
            syncProfile(awsInfo, silentFlag)
        }
    }
    return awsInfo
}

function syncProfile(awsInfo, silentFlag){
    let isSuccessful = false
    let awsConfig = awsConfigProfileReader.getSystemConfig(awsInfo.ProfileName, silentFlag)
    if(awsConfig){
        let jsonString = JSON.stringify(awsConfig)
        fs.writeFileSync(awsInfo.AWSConfigFilePath, jsonString, 'utf8')

        awsInfo.LastProfileSyncTime = moment().format(awsmobilejsConstant.DateTimeFormatString) 
        jsonString = JSON.stringify(awsInfo, null, '\t')
        fs.writeFileSync(awsInfo.AWSInfoFilePath, jsonString, 'utf8')
        isSuccessful = true
    }else if(!fs.existsSync(awsInfo.AWSConfigFilePath)){
        let awsConfig = awsConfigTemplate
        let jsonString = JSON.stringify(awsConfig)
        fs.writeFileSync(awsInfo.AWSConfigFilePath, jsonString, 'utf8')
    }
    return isSuccessful
}

function isSyncProfileNeeded(awsInfo){
    let result = false

    if(awsInfo.IsUsingProfile){
        let sysAwsConfigFilePath = pathManager.getSysAwsConfigFilePath()
        let sysAwsCredentailsFilePath = pathManager.getSysAwsCredentialsFilePath()
        if(fs.existsSync(sysAwsConfigFilePath) && fs.existsSync(sysAwsCredentailsFilePath)){
            let awsConfigFilePath = awsInfo.AWSConfigFilePath
            if(awsConfigFilePath && fs.existsSync(awsConfigFilePath)){ 
                let lastProfileSyncTime = moment(awsInfo.LastProfileSyncTime, awsmobilejsConstant.DateTimeFormatString)
                let lastSysConfigFileModificationTime = moment(fs.lstatSync(sysAwsConfigFilePath).mtime)
                let lastSysCredentialsFileModificationTime = moment(fs.lstatSync(sysAwsCredentailsFilePath).mtime)
                let lastConfigFileModificationTime = moment(fs.lstatSync(awsConfigFilePath).mtime)

                result =!lastProfileSyncTime.isValid() ||
                        !lastSysConfigFileModificationTime.isValid() ||
                        !lastSysCredentialsFileModificationTime.isValid() ||
                        !lastConfigFileModificationTime.isValid() ||
                        lastProfileSyncTime.isBefore(lastSysConfigFileModificationTime) ||
                        lastProfileSyncTime.isBefore(lastSysCredentialsFileModificationTime) ||
                        lastProfileSyncTime.isBefore(lastConfigFileModificationTime) 
            }else{
                result = true
            }
        }
    }

    return result
}

/////////////////////////////////
const awsInfoTemplate = {
    "IsUsingProfile": false,
    "ProfileName": "",
    "AWSConfigFilePath": "",
	"AWSInfoFilePath": "",
	"LastProfileSyncTime": "2018-01-01-01-01-01"
}

const awsConfigTemplate = {
    "accessKeyId": awsmobilejsConstant.DefaultAWSAccessKeyId,
    "secretAccessKey": awsmobilejsConstant.DefaultAWSSecretAccessKey,
    "region": "us-west-1"
}

function ensureFolderStructure(){
    let sysAWSMobileJSDirPath = pathManager.getSysAWSMobileJSDirPath()
    let sysProjectAWSConfigDirPath = pathManager.getSysProjectAWSConfigDirPath()
    fs.ensureDirSync(sysAWSMobileJSDirPath)
    fs.ensureDirSync(sysProjectAWSConfigDirPath)
}

/////////////////////////////////////////////
function validateAWSConfig(awsConfig){
    return validateAccessKeyID(awsConfig.accessKeyId) &&
    validateSecretAccessKey(awsConfig.secretAccessKey) &&
    validateAWSRegion(awsConfig.region)
}

function isNewUser(awsDetails){//only called when resolved awsconfig is invalid
    let result = true

    let sysAwsConfigFilePath = pathManager.getSysAwsConfigFilePath()
    let sysAwsCredentailsFilePath = pathManager.getSysAwsCredentialsFilePath()

    if(fs.existsSync(sysAwsConfigFilePath) && fs.existsSync(sysAwsCredentailsFilePath)){
        result = false
    }

    return result
}

function validateAccessKeyID(accessKeyId){
    return (accessKeyId && accessKeyId != awsmobilejsConstant.DefaultAWSAccessKeyId)
}

function validateSecretAccessKey(secretAccessKey){
    return (secretAccessKey && secretAccessKey != awsmobilejsConstant.DefaultAWSSecretAccessKey)
}

function validateAWSRegion(region){
    return awsMobileRegions.includes(region)
}

module.exports = {
    resolve, 
    setProfile, 
    setNoProfileSync, 
    validateAWSConfig, 
    isNewUser
}
  